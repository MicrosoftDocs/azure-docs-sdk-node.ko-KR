### YamlMime:UniversalReference
ms.openlocfilehash: 3fa73e6b39aa13478c9ab2e98f6d062ffddb3ae7
ms.sourcegitcommit: 0e294f7c4dcdfae9df18ff3e82b6563680ef2519
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 01/25/2019
ms.locfileid: "55057744"
items:
- uid: azure-iothub.Client
  name: Client
  fullName: Client
  children:
  - azure-iothub.Client.close_1
  - azure-iothub.Client.close
  - azure-iothub.Client.fromConnectionString
  - azure-iothub.Client.fromSharedAccessSignature
  - azure-iothub.Client.getFeedbackReceiver_1
  - azure-iothub.Client.getFeedbackReceiver
  - azure-iothub.Client.getFileNotificationReceiver_1
  - azure-iothub.Client.getFileNotificationReceiver
  - azure-iothub.Client.invokeDeviceMethod_2
  - azure-iothub.Client.invokeDeviceMethod
  - azure-iothub.Client.invokeDeviceMethod_3
  - azure-iothub.Client.invokeDeviceMethod_1
  - azure-iothub.Client.open_1
  - azure-iothub.Client.open
  - azure-iothub.Client.send_1
  - azure-iothub.Client.send
  - azure-iothub.Client.ServiceReceiver
  - azure-iothub.Client.setRetryPolicy
  - azure-iothub.Client.Transport
  - azure-iothub.Client.TransportConfigOptions
  - azure-iothub.Client.TransportCtor
  langs:
  - typeScript
  type: class
  summary: >
    <span data-ttu-id="beb3a-101">IoT Hub 서비스 클라이언트를 Azure IoT hub 통해 장치를 사용 하 여 통신에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-101">The IoT Hub service client is used to communicate with devices through an Azure IoT hub.</span></span>

    <span data-ttu-id="beb3a-102">SDK 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-102">It lets the SDK user:</span></span>
      - <span data-ttu-id="beb3a-103">장치에 장치-클라우드 (명령)을 보낼: 명령을 IoT Hub에서 지연 되 고 장치가 연결 된 경우에 비동기적으로 배달 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-103">send device-to-cloud (also known as commands) to devices: commands are queued on IoT Hub and delivered asynchronously only when the device is connected.</span></span> <span data-ttu-id="beb3a-104">장치 당 50 개의 명령은 대기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-104">Only 50 commands can be queued per device.</span></span>
      - <span data-ttu-id="beb3a-105">장치에서 직접 메서드 호출 (장치 현재 연결 되어 있는 경우에 작동 하는: 장치와 통신 하는 동기 방법)</span><span class="sxs-lookup"><span data-stu-id="beb3a-105">invoke direct methods on devices (which will work only if the device is currently connected: it's a synchronous way of communicating with the device)</span></span>
      - <span data-ttu-id="beb3a-106">이전 명령에 대 한 장치에서 보낸 피드백 메시지를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-106">listen for feedback messages sent by devices for previous commands.</span></span>
      - <span data-ttu-id="beb3a-107">장치에서 파일 업로드 알림을 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-107">listen for file upload notifications from devices.</span></span>
    <span data-ttu-id="beb3a-108">사용자가 새로 만들어야 <xref:azure-iothub.Client> 팩터리 메서드 중 하나를 호출 하 여 인스턴스 [fromConnectionString](xref:azure-iothub.Client.fromConnectionString) 또는 [fromSharedAccessSignature](xref:azure-iothub.Client.fromSharedAccessSignature)IoT Hub 서비스 클라이언트를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-108">Users should create new <xref:azure-iothub.Client> instances by calling one of the factory methods, [fromConnectionString](xref:azure-iothub.Client.fromConnectionString) or [fromSharedAccessSignature](xref:azure-iothub.Client.fromSharedAccessSignature), to create an IoT Hub service Client.</span></span>
  extends:
    name: azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.close_1
  name: close()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-109">IoT hub에 대 한 연결을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-109">Closes the connection to an IoT hub.</span></span>
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
  package: azure-iothub
- uid: azure-iothub.Client.close
  name: close(IncomingMessageCallback<Disconnected>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-110">IoT hub에 대 한 연결을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-110">Closes the connection to an IoT hub.</span></span>
  syntax:
    content: 'function close(done: IncomingMessageCallback<Disconnected>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<Disconnected>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.fromConnectionString
  name: fromConnectionString(string, Client.TransportCtor)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-111">기본 전송 (Amqp) 또는 두 번째 인수에 지정 된 것을 사용 하 여 지정 된 연결 문자열에서 IoT Hub 서비스 클라이언트를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-111">Creates an IoT Hub service client from the given connection string using the default transport (Amqp) or the one specified in the second argument.</span></span>
  syntax:
    content: 'static function fromConnectionString(connStr: string, transportCtor?: Client.TransportCtor)'
    parameters:
    - id: connStr
      type:
      - string
      description: <span data-ttu-id="beb3a-112">IoT hub에 대 한 권한 "장치 연결"을 캡슐화 하는 연결 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-112">A connection string which encapsulates "device connect" permissions on an IoT hub.</span></span>
    - id: transportCtor
      type:
      - azure-iothub.Client.Client.TransportCtor
      description: ''
      optional: true
    return:
      type:
      - azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.fromSharedAccessSignature
  name: fromSharedAccessSignature(string, Client.TransportCtor)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-113">두 번째 인수에 지정 된 또는 기본 전송 Amqp ()를 사용 하 여 지정 된 공유 액세스 서명에서 IoT Hub 서비스 클라이언트를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-113">Creates an IoT Hub service client from the given shared access signature using the default transport (Amqp) or the one specified in the second argument.</span></span>
  syntax:
    content: 'static function fromSharedAccessSignature(sharedAccessSignature: string, transportCtor?: Client.TransportCtor)'
    parameters:
    - id: sharedAccessSignature
      type:
      - string
      description: <span data-ttu-id="beb3a-114">IoT hub에 대 한 권한 "서비스 연결"을 캡슐화 하는 공유 액세스 서명입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-114">A shared access signature which encapsulates "service connect" permissions on an IoT hub.</span></span>
    - id: transportCtor
      type:
      - azure-iothub.Client.Client.TransportCtor
      description: ''
      optional: true
    return:
      type:
      - azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.getFeedbackReceiver_1
  name: getFeedbackReceiver()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-115">클라이언트에서 새 피드백 메시지를 받을 때 이벤트를 내보내는 AmqpReceiver 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-115">Returns a AmqpReceiver object which emits events when new feedback messages are received by the client.</span></span>
  syntax:
    content: function getFeedbackReceiver()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  package: azure-iothub
- uid: azure-iothub.Client.getFeedbackReceiver
  name: getFeedbackReceiver(IncomingMessageCallback<ServiceReceiver>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-116">클라이언트에서 새 피드백 메시지를 받을 때 이벤트를 내보내는 AmqpReceiver 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-116">Returns a AmqpReceiver object which emits events when new feedback messages are received by the client.</span></span>
  syntax:
    content: 'function getFeedbackReceiver(done: IncomingMessageCallback<ServiceReceiver>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.getFileNotificationReceiver_1
  name: getFileNotificationReceiver()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-117">클라이언트에서 새 파일 업로드 알림이 수신 될 때 이벤트를 내보내는 AmqpReceiver 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-117">Returns a AmqpReceiver object which emits events when new file upload notifications are received by the client.</span></span>
  syntax:
    content: function getFileNotificationReceiver()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  package: azure-iothub
- uid: azure-iothub.Client.getFileNotificationReceiver
  name: getFileNotificationReceiver(IncomingMessageCallback<ServiceReceiver>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-118">클라이언트에서 새 파일 업로드 알림이 수신 될 때 이벤트를 내보내는 AmqpReceiver 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-118">Returns a AmqpReceiver object which emits events when new file upload notifications are received by the client.</span></span>
  syntax:
    content: 'function getFileNotificationReceiver(done: IncomingMessageCallback<ServiceReceiver>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_2
  name: invokeDeviceMethod(string, DeviceMethodParams)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-119">특정 장치 또는 모듈에서 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-119">Invokes a method on a particular device or module.</span></span>
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, methodParams: DeviceMethodParams)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<any>>
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod
  name: invokeDeviceMethod(string, DeviceMethodParams, IncomingMessageCallback<any>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-120">특정 장치 또는 모듈에서 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-120">Invokes a method on a particular device or module.</span></span>
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, methodParams: DeviceMethodParams, done?: IncomingMessageCallback<any>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: <span data-ttu-id="beb3a-121">기존 장치 id의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-121">The identifier of an existing device identity.</span></span>
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<any>
      description: ''
      optional: true
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_3
  name: invokeDeviceMethod(string, string, DeviceMethodParams)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-122">특정 장치 또는 모듈에서 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-122">Invokes a method on a particular device or module.</span></span>
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, moduleId: string, methodParams: DeviceMethodParams)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: moduleId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<any>>
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_1
  name: invokeDeviceMethod(string, string, DeviceMethodParams, IncomingMessageCallback<any>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-123">특정 장치 또는 모듈에서 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-123">Invokes a method on a particular device or module.</span></span>
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, moduleId: string, methodParams: DeviceMethodParams, done?: IncomingMessageCallback<any>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: moduleId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<any>
      description: ''
      optional: true
  package: azure-iothub
- uid: azure-iothub.Client.open_1
  name: open()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-124">IoT hub에 연결을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-124">Opens the connection to an IoT hub.</span></span>
  syntax:
    content: function open()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
  package: azure-iothub
- uid: azure-iothub.Client.open
  name: open(IncomingMessageCallback<Connected>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-125">IoT hub에 연결을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-125">Opens the connection to an IoT hub.</span></span>
  syntax:
    content: 'function open(done: IncomingMessageCallback<Connected>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<Connected>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.send_1
  name: send(string, Message | Message.BufferConvertible)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-126">장치에 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-126">Sends a message to a device.</span></span>
  syntax:
    content: 'function send(deviceId: string, message: Message | Message.BufferConvertible)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: message
      type:
      - Message | Message.BufferConvertible
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
  package: azure-iothub
- uid: azure-iothub.Client.send
  name: send(string, Message | Message.BufferConvertible, IncomingMessageCallback<MessageEnqueued>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-127">장치에 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-127">Sends a message to a device.</span></span>
  syntax:
    content: 'function send(deviceId: string, message: Message | Message.BufferConvertible, done: IncomingMessageCallback<MessageEnqueued>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: <span data-ttu-id="beb3a-128">기존 장치 id의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-128">The identifier of an existing device identity.</span></span>
    - id: message
      type:
      - Message | Message.BufferConvertible
      description: >-
        <span data-ttu-id="beb3a-129">디바이스에 보낼 메시지 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-129">The body of the message to send to the device.</span></span>

        <span data-ttu-id="beb3a-130">하는 경우 `message` 형식이 아닙니다 [메시지](xref:azure-iot-common.Message), 변환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-130">If `message` is not of type [Message](xref:azure-iot-common.Message), it will be converted.</span></span>
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<MessageEnqueued>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.setRetryPolicy
  name: setRetryPolicy(RetryPolicy)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="beb3a-131">클라이언트에서 사용 하 여 네트워크 작업을 다시 시도 정책을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-131">Set the policy used by the client to retry network operations.</span></span>
  syntax:
    content: 'function setRetryPolicy(policy: RetryPolicy)'
    parameters:
    - id: policy
      type:
      - RetryPolicy
      description: >
        <span data-ttu-id="beb3a-132">(예: 작업을 다시 시도 하는 데 사용 되는 정책</span><span class="sxs-lookup"><span data-stu-id="beb3a-132">policy used to retry operations (eg.</span></span> <span data-ttu-id="beb3a-133">열기, 보내기, 등).</span><span class="sxs-lookup"><span data-stu-id="beb3a-133">open, send, etc.).</span></span>

        <span data-ttu-id="beb3a-134">SDK는 2 "기본 제공" 정책을 사용 하 여 제공 됩니다. ExponentialBackoffWithJitter (기본값)를 NoRetry (모든 형태의 재시도 취소) 합니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-134">The SDK comes with 2 "built-in" policies: ExponentialBackoffWithJitter (default) and NoRetry (to cancel any form of retry).</span></span> <span data-ttu-id="beb3a-135">사용자 고유의 개체 전달할 수도 2 메서드를 구현 합니다.-shouldRetry(err: 오류): 부울: nextRetryTimeout-오류 유형에 따라는 작업을 재시도 해야 하는지 여부를 나타냅니다 (retryCount: 제한 번호: 부울): 번호: 시도 (지난 수에 기반을 다시 시도 하기 전에 밀리초 단위로 대기 시간을 반환 합니다. retryCount) 및 오류 제한 오류 인지는 사실입니다.</span><span class="sxs-lookup"><span data-stu-id="beb3a-135">The user can also pass its own object as long as it implements 2 methods: - shouldRetry(err: Error): boolean : indicates whether an operation should be retried based on the error type - nextRetryTimeout(retryCount: number, throttled: boolean): number : returns the time to wait (in milliseconds) before retrying based on the past number of attempts (retryCount) and the fact that the error is a throttling error or not.</span></span>
  package: azure-iothub
references:
- uid: azure-iothub.Client
  name: Client
  spec.typeScript:
  - name: Client
    fullName: Client
    uid: azure-iothub.Client
- uid: Callback<azure-iothub.Client.ServiceReceiver>
  name: ServiceReceiver>
  spec.typeScript:
  - name: Callback<
    fullName: Callback<
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>'
    fullName: '>'
- uid: azure-iothub.IncomingMessageCallback<Disconnected>
  name: IncomingMessageCallback<Disconnected>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <Disconnected>
    fullName: <Disconnected>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
  name: ResultWithIncomingMessage<Disconnected>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <Disconnected>>
    fullName: <Disconnected>>
- uid: azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
  name: ServiceReceiver>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <
    fullName: <
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>'
    fullName: '>'
- uid: Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  name: ServiceReceiver>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <
    fullName: <
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>>'
    fullName: '>>'
- uid: azure-iothub.DeviceMethodParams
  name: DeviceMethodParams
  spec.typeScript:
  - name: DeviceMethodParams
    fullName: DeviceMethodParams
    uid: azure-iothub.DeviceMethodParams
- uid: azure-iothub.IncomingMessageCallback<any>
  name: IncomingMessageCallback<any>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <any>
    fullName: <any>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<any>>
  name: ResultWithIncomingMessage<any>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <any>>
    fullName: <any>>
- uid: azure-iothub.IncomingMessageCallback<Connected>
  name: IncomingMessageCallback<Connected>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <Connected>
    fullName: <Connected>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
  name: ResultWithIncomingMessage<Connected>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <Connected>>
    fullName: <Connected>>
- uid: azure-iothub.IncomingMessageCallback<MessageEnqueued>
  name: IncomingMessageCallback<MessageEnqueued>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <MessageEnqueued>
    fullName: <MessageEnqueued>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
  name: ResultWithIncomingMessage<MessageEnqueued>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <MessageEnqueued>>
    fullName: <MessageEnqueued>>
- uid: azure-iothub.Client.Client.TransportCtor
  name: TransportCtor
  spec.typeScript:
  - name: TransportCtor
    fullName: TransportCtor
    uid: azure-iothub.Client.Client.TransportCtor
- uid: azure-iothub.Client.ServiceReceiver
  name: ServiceReceiver
- uid: azure-iothub.Client.Transport
  name: Transport
- uid: azure-iothub.Client.TransportConfigOptions
  name: TransportConfigOptions
- uid: azure-iothub.Client.TransportCtor
  name: TransportCtor
