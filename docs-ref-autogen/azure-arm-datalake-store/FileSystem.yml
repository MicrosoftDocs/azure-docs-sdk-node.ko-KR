### YamlMime:UniversalReference
ms.openlocfilehash: 75afaedf2f5e76f076c1167cc227823ca7dc934f
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 08/12/2018
ms.locfileid: "40068802"
items:
- uid: azure-arm-datalake-store.FileSystem
  name: FileSystem
  fullName: FileSystem
  children:
  - azure-arm-datalake-store.FileSystem.append
  - azure-arm-datalake-store.FileSystem.append_1
  - azure-arm-datalake-store.FileSystem.append_2
  - azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.checkAccess
  - azure-arm-datalake-store.FileSystem.checkAccess_1
  - azure-arm-datalake-store.FileSystem.checkAccess_2
  - azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concat_1
  - azure-arm-datalake-store.FileSystem.concat
  - azure-arm-datalake-store.FileSystem.concat_2
  - azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concurrentAppend
  - azure-arm-datalake-store.FileSystem.concurrentAppend_1
  - azure-arm-datalake-store.FileSystem.concurrentAppend_2
  - azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.create_2
  - azure-arm-datalake-store.FileSystem.create
  - azure-arm-datalake-store.FileSystem.create_1
  - azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.deleteMethod
  - azure-arm-datalake-store.FileSystem.deleteMethod_1
  - azure-arm-datalake-store.FileSystem.deleteMethod_2
  - azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getAclStatus_1
  - azure-arm-datalake-store.FileSystem.getAclStatus
  - azure-arm-datalake-store.FileSystem.getAclStatus_2
  - azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getContentSummary
  - azure-arm-datalake-store.FileSystem.getContentSummary_2
  - azure-arm-datalake-store.FileSystem.getContentSummary_1
  - azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getFileStatus
  - azure-arm-datalake-store.FileSystem.getFileStatus_1
  - azure-arm-datalake-store.FileSystem.getFileStatus_2
  - azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.listFileStatus_1
  - azure-arm-datalake-store.FileSystem.listFileStatus_2
  - azure-arm-datalake-store.FileSystem.listFileStatus
  - azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.mkdirs
  - azure-arm-datalake-store.FileSystem.mkdirs_1
  - azure-arm-datalake-store.FileSystem.mkdirs_2
  - azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.modifyAclEntries
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  - azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.msConcat
  - azure-arm-datalake-store.FileSystem.msConcat_2
  - azure-arm-datalake-store.FileSystem.msConcat_1
  - azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.open
  - azure-arm-datalake-store.FileSystem.open_2
  - azure-arm-datalake-store.FileSystem.open_1
  - azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAcl_1
  - azure-arm-datalake-store.FileSystem.removeAcl_2
  - azure-arm-datalake-store.FileSystem.removeAcl
  - azure-arm-datalake-store.FileSystem.removeAclEntries
  - azure-arm-datalake-store.FileSystem.removeAclEntries_2
  - azure-arm-datalake-store.FileSystem.removeAclEntries_1
  - azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  - azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.rename
  - azure-arm-datalake-store.FileSystem.rename_2
  - azure-arm-datalake-store.FileSystem.rename_1
  - azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setAcl
  - azure-arm-datalake-store.FileSystem.setAcl_1
  - azure-arm-datalake-store.FileSystem.setAcl_2
  - azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setFileExpiry
  - azure-arm-datalake-store.FileSystem.setFileExpiry_1
  - azure-arm-datalake-store.FileSystem.setFileExpiry_2
  - azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setOwner
  - azure-arm-datalake-store.FileSystem.setOwner_1
  - azure-arm-datalake-store.FileSystem.setOwner_2
  - azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setPermission
  - azure-arm-datalake-store.FileSystem.setPermission_1
  - azure-arm-datalake-store.FileSystem.setPermission_2
  - azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append
  name: append
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-101">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-101">Used for serial appends to the specified file.</span></span> <span data-ttu-id="e2b2f-102">참고: 대상 ConcurrentAppend에 의해 추가 된 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-102">NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="e2b2f-103">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-103">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-104">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-104">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-105">Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-105">The Data Lake Store path (starting with '/') of the file to which to append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-106">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-106">The file contents to include when appending to the file.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_1
  name: append
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-107">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-107">Used for serial appends to the specified file.</span></span> <span data-ttu-id="e2b2f-108">참고: 대상 ConcurrentAppend에 의해 추가 된 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-108">NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="e2b2f-109">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-109">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_2
  name: append
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-110">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-110">Used for serial appends to the specified file.</span></span> <span data-ttu-id="e2b2f-111">참고: 대상 ConcurrentAppend에 의해 추가 된 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-111">NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="e2b2f-112">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-112">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  name: appendWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-113">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-113">Used for serial appends to the specified file.</span></span> <span data-ttu-id="e2b2f-114">참고: 대상 ConcurrentAppend에 의해 추가 된 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-114">NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="e2b2f-115">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-115">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function appendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-116">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-116">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-117">Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-117">The Data Lake Store path (starting with '/') of the file to which to append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-118">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-118">The file contents to include when appending to the file.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess
  name: checkAccess
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-119">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-119">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-120">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-120">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-121">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-121">The Data Lake Store path (starting with '/') of the file or directory for which to check access.</span></span>
    - id: fsaction
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-122">정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-122">File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_1
  name: checkAccess
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-123">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-123">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_2
  name: checkAccess
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-124">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-124">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  name: checkAccessWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-125">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-125">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccessWithHttpOperationResponse(accountName: string, path: string, fsaction: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-126">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-126">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-127">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-127">The Data Lake Store path (starting with '/') of the file or directory for which to check access.</span></span>
    - id: fsaction
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-128">정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-128">File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_1
  name: concat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-129">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-129">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat
  name: concat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-130">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-130">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-131">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-131">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-132">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-132">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: sources
      type:
      - string[]
      description: >
        <span data-ttu-id="e2b2f-133">Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-133">A list of comma separated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_2
  name: concat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-134">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-134">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  name: concatWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-135">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-135">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concatWithHttpOperationResponse(accountName: string, path: string, sources: string[], options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-136">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-136">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-137">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-137">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: sources
      type:
      - string[]
      description: >
        <span data-ttu-id="e2b2f-138">Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-138">A list of comma separated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend
  name: concurrentAppend
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="e2b2f-139">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-139">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="e2b2f-140">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-140">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="e2b2f-141">참고: 대상 만들기 또는 표준 (순차적) 추가 하 여 추가 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-141">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="e2b2f-142">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-142">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="e2b2f-143">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-143">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-144">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-144">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-145">Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-145">The Data Lake Store path (starting with '/') of the file to which to append using concurrent append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-146">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-146">The file contents to include when appending to the file.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_1
  name: concurrentAppend
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="e2b2f-147">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-147">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="e2b2f-148">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-148">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="e2b2f-149">참고: 대상 만들기 또는 표준 (순차적) 추가 하 여 추가 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-149">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="e2b2f-150">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-150">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="e2b2f-151">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-151">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_2
  name: concurrentAppend
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="e2b2f-152">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-152">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="e2b2f-153">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-153">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="e2b2f-154">참고: 대상 만들기 또는 표준 (순차적) 추가 하 여 추가 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-154">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="e2b2f-155">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-155">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="e2b2f-156">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-156">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  name: concurrentAppendWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="e2b2f-157">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-157">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="e2b2f-158">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-158">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="e2b2f-159">참고: 대상 만들기 또는 표준 (순차적) 추가 하 여 추가 데이터를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-159">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="e2b2f-160">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-160">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="e2b2f-161">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-161">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-162">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-162">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-163">Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-163">The Data Lake Store path (starting with '/') of the file to which to append using concurrent append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-164">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-164">The file contents to include when appending to the file.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_2
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-165">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-165">Creates a file with optionally specified content.</span></span> <span data-ttu-id="e2b2f-166">참고: 콘텐츠를 제공 하는 경우 결과 파일을 수정할 수 없습니다 ConcurrentAppend를 사용 하 여.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-166">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-167">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-167">Creates a file with optionally specified content.</span></span> <span data-ttu-id="e2b2f-168">참고: 콘텐츠를 제공 하는 경우 결과 파일을 수정할 수 없습니다 ConcurrentAppend를 사용 하 여.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-168">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-169">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-169">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-170">Data Lake Store 경로 (부터 '/') 파일을 만드십시오.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-170">The Data Lake Store path (starting with '/') of the file to create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_1
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-171">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-171">Creates a file with optionally specified content.</span></span> <span data-ttu-id="e2b2f-172">참고: 콘텐츠를 제공 하는 경우 결과 파일을 수정할 수 없습니다 ConcurrentAppend를 사용 하 여.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-172">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  name: createWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="e2b2f-173">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-173">Creates a file with optionally specified content.</span></span> <span data-ttu-id="e2b2f-174">참고: 콘텐츠를 제공 하는 경우 결과 파일을 수정할 수 없습니다 ConcurrentAppend를 사용 하 여.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-174">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function createWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-175">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-175">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-176">Data Lake Store 경로 (부터 '/') 파일을 만드십시오.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-176">The Data Lake Store path (starting with '/') of the file to create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-177">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-177">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-178">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-178">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-179">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-179">The Data Lake Store path (starting with '/') of the file or directory to delete.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_1
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-180">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-180">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_2
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-181">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-181">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options: function, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-182">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-182">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-183">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-183">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-184">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-184">The Data Lake Store path (starting with '/') of the file or directory to delete.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_1
  name: getAclStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-185">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-185">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus
  name: getAclStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-186">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-186">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-187">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-187">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-188">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-188">The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_2
  name: getAclStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-189">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-189">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options: function, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  name: getAclStatusWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-190">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-190">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatusWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-191">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-191">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-192">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-192">The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary
  name: getContentSummary
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-193">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-193">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-194">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-194">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-195">Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-195">The Data Lake Store path (starting with '/') of the file for which to retrieve the summary.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_2
  name: getContentSummary
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-196">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-196">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options: function, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_1
  name: getContentSummary
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-197">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-197">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  name: getContentSummaryWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-198">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-198">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummaryWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-199">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-199">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-200">Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-200">The Data Lake Store path (starting with '/') of the file for which to retrieve the summary.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus
  name: getFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-201">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-201">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-202">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-202">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-203">Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-203">The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_1
  name: getFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-204">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-204">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_2
  name: getFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-205">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-205">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options: function, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  name: getFileStatusWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-206">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-206">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-207">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-207">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-208">Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-208">The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_1
  name: listFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-209">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-209">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_2
  name: listFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-210">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-210">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options: function, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus
  name: listFileStatus
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-211">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-211">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-212">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-212">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-213">Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-213">The Data Lake Store path (starting with '/') of the directory to list.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  name: listFileStatusWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-214">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-214">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-215">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-215">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-216">Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-216">The Data Lake Store path (starting with '/') of the directory to list.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs
  name: mkdirs
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-217">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-217">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-218">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-218">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-219">Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-219">The Data Lake Store path (starting with '/') of the directory to create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_1
  name: mkdirs
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-220">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-220">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_2
  name: mkdirs
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-221">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-221">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options: function, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  name: mkdirsWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-222">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-222">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirsWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-223">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-223">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-224">Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-224">The Data Lake Store path (starting with '/') of the directory to create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries
  name: modifyAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-225">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-225">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-226">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-226">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-227">Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-227">The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-228">ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-228">The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  name: modifyAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-229">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-229">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  name: modifyAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-230">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-230">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  name: modifyAclEntriesWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-231">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-231">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-232">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-232">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-233">Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-233">The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-234">ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-234">The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat
  name: msConcat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-235">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-235">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="e2b2f-236">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-236">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="e2b2f-237">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-237">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-238">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-238">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-239">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-239">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-240">Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-240">A list of Data Lake Store paths (starting with '/') of the source files.</span></span> <span data-ttu-id="e2b2f-241">형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span><span class="sxs-lookup"><span data-stu-id="e2b2f-241">Must be a comma-separated path list in the format: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_2
  name: msConcat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-242">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-242">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="e2b2f-243">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-243">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="e2b2f-244">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-244">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_1
  name: msConcat
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-245">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-245">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="e2b2f-246">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-246">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="e2b2f-247">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-247">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  name: msConcatWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-248">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-248">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="e2b2f-249">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-249">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="e2b2f-250">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-250">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcatWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-251">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-251">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-252">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-252">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="e2b2f-253">Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-253">A list of Data Lake Store paths (starting with '/') of the source files.</span></span> <span data-ttu-id="e2b2f-254">형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span><span class="sxs-lookup"><span data-stu-id="e2b2f-254">Must be a comma-separated path list in the format: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open
  name: open
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-255">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-255">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-256">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-256">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-257">Data Lake Store 경로 (부터 '/')의 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-257">The Data Lake Store path (starting with '/') of the file to open.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_2
  name: open
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-258">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-258">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, options: function, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_1
  name: open
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-259">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-259">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  name: openWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-260">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-260">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function openWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-261">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-261">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-262">Data Lake Store 경로 (부터 '/')의 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-262">The Data Lake Store path (starting with '/') of the file to open.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<stream.Readable>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_1
  name: removeAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-263">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-263">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_2
  name: removeAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-264">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-264">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl
  name: removeAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-265">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-265">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-266">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-266">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-267">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-267">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries
  name: removeAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-268">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-268">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-269">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-269">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-270">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-270">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-271">ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '</span><span class="sxs-lookup"><span data-stu-id="e2b2f-271">The ACL spec included in ACL removal operations in the format '[default:]user|group|other'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_2
  name: removeAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-272">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-272">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_1
  name: removeAclEntries
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-273">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-273">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  name: removeAclEntriesWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-274">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-274">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-275">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-275">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-276">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-276">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-277">ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '</span><span class="sxs-lookup"><span data-stu-id="e2b2f-277">The ACL spec included in ACL removal operations in the format '[default:]user|group|other'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  name: removeAclWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-278">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-278">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAclWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-279">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-279">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-280">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-280">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl
  name: removeDefaultAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-281">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-281">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-282">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-282">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-283">Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-283">The Data Lake Store path (starting with '/') of the directory with the default ACL being removed.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  name: removeDefaultAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-284">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-284">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  name: removeDefaultAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-285">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-285">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  name: removeDefaultAclWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-286">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-286">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAclWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-287">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-287">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-288">Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-288">The Data Lake Store path (starting with '/') of the directory with the default ACL being removed.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename
  name: rename
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-289">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-289">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-290">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-290">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-291">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-291">The Data Lake Store path (starting with '/') of the file or directory to move/rename.</span></span>
    - id: destination
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-292">파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로</span><span class="sxs-lookup"><span data-stu-id="e2b2f-292">The path to move/rename the file or folder to</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_2
  name: rename
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-293">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-293">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options: function, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_1
  name: rename
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-294">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-294">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  name: renameWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-295">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-295">Rename a file or directory.</span></span>
  syntax:
    content: 'function renameWithHttpOperationResponse(accountName: string, path: string, destination: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-296">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-296">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-297">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-297">The Data Lake Store path (starting with '/') of the file or directory to move/rename.</span></span>
    - id: destination
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-298">파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로</span><span class="sxs-lookup"><span data-stu-id="e2b2f-298">The path to move/rename the file or folder to</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl
  name: setAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-299">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-299">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-300">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-300">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-301">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-301">The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-302">ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-302">The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_1
  name: setAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-303">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-303">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_2
  name: setAcl
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-304">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-304">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  name: setAclWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-305">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-305">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAclWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-306">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-306">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-307">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-307">The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-308">ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-308">The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry
  name: setFileExpiry
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-309">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-309">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="e2b2f-310">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-310">This operation can only be executed against files.</span></span> <span data-ttu-id="e2b2f-311">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-311">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-312">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-312">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-313">Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-313">The Data Lake Store path (starting with '/') of the file on which to set or remove the expiration time.</span></span>
    - id: expiryOption
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-314">파일에 사용할 만료 종류를 나타냅니다: 1.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-314">Indicates the type of expiration to use for the file: 1.</span></span> <span data-ttu-id="e2b2f-315">NeverExpire: 만료 시간을 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-315">NeverExpire: ExpireTime is ignored.</span></span> <span data-ttu-id="e2b2f-316">2.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-316">2.</span></span> <span data-ttu-id="e2b2f-317">RelativeToNow: 만료 시간은 밀리초 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-317">RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration date relative to when file expiration is updated.</span></span> <span data-ttu-id="e2b2f-318">3.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-318">3.</span></span> <span data-ttu-id="e2b2f-319">RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-319">RelativeToCreationDate: ExpireTime is an integer in milliseconds representing the expiration date relative to file creation.</span></span> <span data-ttu-id="e2b2f-320">4.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-320">4.</span></span> <span data-ttu-id="e2b2f-321">절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-321">Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.</span></span> <span data-ttu-id="e2b2f-322">가능한 값: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-322">Possible values include: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_1
  name: setFileExpiry
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-323">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-323">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="e2b2f-324">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-324">This operation can only be executed against files.</span></span> <span data-ttu-id="e2b2f-325">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-325">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_2
  name: setFileExpiry
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-326">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-326">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="e2b2f-327">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-327">This operation can only be executed against files.</span></span> <span data-ttu-id="e2b2f-328">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-328">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  name: setFileExpiryWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-329">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-329">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="e2b2f-330">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-330">This operation can only be executed against files.</span></span> <span data-ttu-id="e2b2f-331">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-331">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiryWithHttpOperationResponse(accountName: string, path: string, expiryOption: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-332">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-332">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-333">Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-333">The Data Lake Store path (starting with '/') of the file on which to set or remove the expiration time.</span></span>
    - id: expiryOption
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-334">파일에 사용할 만료 종류를 나타냅니다: 1.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-334">Indicates the type of expiration to use for the file: 1.</span></span> <span data-ttu-id="e2b2f-335">NeverExpire: 만료 시간을 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-335">NeverExpire: ExpireTime is ignored.</span></span> <span data-ttu-id="e2b2f-336">2.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-336">2.</span></span> <span data-ttu-id="e2b2f-337">RelativeToNow: 만료 시간은 밀리초 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-337">RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration date relative to when file expiration is updated.</span></span> <span data-ttu-id="e2b2f-338">3.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-338">3.</span></span> <span data-ttu-id="e2b2f-339">RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-339">RelativeToCreationDate: ExpireTime is an integer in milliseconds representing the expiration date relative to file creation.</span></span> <span data-ttu-id="e2b2f-340">4.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-340">4.</span></span> <span data-ttu-id="e2b2f-341">절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-341">Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.</span></span> <span data-ttu-id="e2b2f-342">가능한 값: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span><span class="sxs-lookup"><span data-stu-id="e2b2f-342">Possible values include: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner
  name: setOwner
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-343">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-343">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-344">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-344">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-345">Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-345">The Data Lake Store path (starting with '/') of the file or directory for which to set the owner.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_1
  name: setOwner
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-346">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-346">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_2
  name: setOwner
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-347">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-347">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  name: setOwnerWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-348">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-348">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwnerWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-349">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-349">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-350">Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-350">The Data Lake Store path (starting with '/') of the file or directory for which to set the owner.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission
  name: setPermission
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-351">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-351">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-352">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-352">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-353">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-353">The Data Lake Store path (starting with '/') of the file or directory for which to set the permission.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_1
  name: setPermission
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-354">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-354">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_2
  name: setPermission
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-355">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-355">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  name: setPermissionWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e2b2f-356">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-356">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermissionWithHttpOperationResponse(accountName: string, path: string, options?: function)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-357">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-357">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="e2b2f-358">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.</span><span class="sxs-lookup"><span data-stu-id="e2b2f-358">The Data Lake Store path (starting with '/') of the file or directory for which to set the permission.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
references:
- uid: Promise<azure-arm-datalake-store.FileOperationResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileOperationResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.AclStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.AclStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.ContentSummaryResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusesResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>>'
    fullName: '>>'
