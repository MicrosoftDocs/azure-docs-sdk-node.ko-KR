### YamlMime:UniversalReference
ms.openlocfilehash: 051668180977efad82270f671a6fb69557e2d712
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52044988"
items:
- uid: azure-arm-datalake-store.FileSystem
  name: FileSystem
  fullName: FileSystem
  children:
  - azure-arm-datalake-store.FileSystem.append
  - azure-arm-datalake-store.FileSystem.append_2
  - azure-arm-datalake-store.FileSystem.append_1
  - azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.checkAccess
  - azure-arm-datalake-store.FileSystem.checkAccess_2
  - azure-arm-datalake-store.FileSystem.checkAccess_1
  - azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concat
  - azure-arm-datalake-store.FileSystem.concat_2
  - azure-arm-datalake-store.FileSystem.concat_1
  - azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concurrentAppend
  - azure-arm-datalake-store.FileSystem.concurrentAppend_2
  - azure-arm-datalake-store.FileSystem.concurrentAppend_1
  - azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.create
  - azure-arm-datalake-store.FileSystem.create_2
  - azure-arm-datalake-store.FileSystem.create_1
  - azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.deleteMethod
  - azure-arm-datalake-store.FileSystem.deleteMethod_2
  - azure-arm-datalake-store.FileSystem.deleteMethod_1
  - azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getAclStatus
  - azure-arm-datalake-store.FileSystem.getAclStatus_2
  - azure-arm-datalake-store.FileSystem.getAclStatus_1
  - azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getContentSummary
  - azure-arm-datalake-store.FileSystem.getContentSummary_2
  - azure-arm-datalake-store.FileSystem.getContentSummary_1
  - azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getFileStatus
  - azure-arm-datalake-store.FileSystem.getFileStatus_2
  - azure-arm-datalake-store.FileSystem.getFileStatus_1
  - azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.listFileStatus
  - azure-arm-datalake-store.FileSystem.listFileStatus_2
  - azure-arm-datalake-store.FileSystem.listFileStatus_1
  - azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.mkdirs
  - azure-arm-datalake-store.FileSystem.mkdirs_2
  - azure-arm-datalake-store.FileSystem.mkdirs_1
  - azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.modifyAclEntries
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  - azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.msConcat
  - azure-arm-datalake-store.FileSystem.msConcat_2
  - azure-arm-datalake-store.FileSystem.msConcat_1
  - azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.open
  - azure-arm-datalake-store.FileSystem.open_2
  - azure-arm-datalake-store.FileSystem.open_1
  - azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAcl
  - azure-arm-datalake-store.FileSystem.removeAcl_2
  - azure-arm-datalake-store.FileSystem.removeAcl_1
  - azure-arm-datalake-store.FileSystem.removeAclEntries
  - azure-arm-datalake-store.FileSystem.removeAclEntries_2
  - azure-arm-datalake-store.FileSystem.removeAclEntries_1
  - azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  - azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.rename
  - azure-arm-datalake-store.FileSystem.rename_2
  - azure-arm-datalake-store.FileSystem.rename_1
  - azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setAcl
  - azure-arm-datalake-store.FileSystem.setAcl_2
  - azure-arm-datalake-store.FileSystem.setAcl_1
  - azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setFileExpiry
  - azure-arm-datalake-store.FileSystem.setFileExpiry_2
  - azure-arm-datalake-store.FileSystem.setFileExpiry_1
  - azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setOwner
  - azure-arm-datalake-store.FileSystem.setOwner_2
  - azure-arm-datalake-store.FileSystem.setOwner_1
  - azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setPermission
  - azure-arm-datalake-store.FileSystem.setPermission_2
  - azure-arm-datalake-store.FileSystem.setPermission_1
  - azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append
  name: append(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-101">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-101">Used for serial appends to the specified file.</span></span><span data-ttu-id="19b2c-102"> 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-102"> NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="19b2c-103">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-103">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-104">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-104">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-105">Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-105">The Data Lake Store path (starting with '/') of the file to which to append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-106">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-106">The file contents to include when appending to the file.</span></span>  <span data-ttu-id="19b2c-107">최대 콘텐츠 크기는 4MB입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-107">The maximum content size is 4MB.</span></span>  <span data-ttu-id="19b2c-108">4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-108">For content larger than 4MB you must append the content in 4MB chunks.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_2
  name: append(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-109">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-109">Used for serial appends to the specified file.</span></span><span data-ttu-id="19b2c-110"> 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-110"> NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="19b2c-111">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-111">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_1
  name: append(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-112">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-112">Used for serial appends to the specified file.</span></span><span data-ttu-id="19b2c-113"> 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-113"> NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="19b2c-114">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-114">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  name: appendWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-115">사용 되는 지정된 된 파일에 추가 하는 일련의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-115">Used for serial appends to the specified file.</span></span><span data-ttu-id="19b2c-116"> 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-116"> NOTE: The target must not contain data added by ConcurrentAppend.</span></span> <span data-ttu-id="19b2c-117">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-117">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span>'
  syntax:
    content: 'function appendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-118">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-118">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-119">Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-119">The Data Lake Store path (starting with '/') of the file to which to append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-120">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-120">The file contents to include when appending to the file.</span></span>  <span data-ttu-id="19b2c-121">최대 콘텐츠 크기는 4MB입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-121">The maximum content size is 4MB.</span></span>  <span data-ttu-id="19b2c-122">4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-122">For content larger than 4MB you must append the content in 4MB chunks.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess
  name: checkAccess(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-123">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-123">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-124">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-124">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-125">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-125">The Data Lake Store path (starting with '/') of the file or directory for which to check access.</span></span>
    - id: fsaction
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-126">정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'</span><span class="sxs-lookup"><span data-stu-id="19b2c-126">File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_2
  name: checkAccess(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-127">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-127">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_1
  name: checkAccess(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-128">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-128">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  name: checkAccessWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-129">지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-129">Checks if the specified access is available at the given path.</span></span>
  syntax:
    content: 'function checkAccessWithHttpOperationResponse(accountName: string, path: string, fsaction: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-130">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-130">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-131">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-131">The Data Lake Store path (starting with '/') of the file or directory for which to check access.</span></span>
    - id: fsaction
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-132">정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'</span><span class="sxs-lookup"><span data-stu-id="19b2c-132">File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat
  name: concat(string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-133">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-133">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-134">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-134">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-135">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-135">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: sources
      type:
      - string[]
      description: >
        <span data-ttu-id="19b2c-136">Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-136">A list of comma separated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_2
  name: concat(string, string, string[], Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-137">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-137">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_1
  name: concat(string, string, string[], ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-138">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-138">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  name: concatWithHttpOperationResponse(string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-139">성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-139">Concatenates the list of source files into the destination file, removing all source files upon success.</span></span>
  syntax:
    content: 'function concatWithHttpOperationResponse(accountName: string, path: string, sources: string[], options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-140">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-140">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-141">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-141">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: sources
      type:
      - string[]
      description: >
        <span data-ttu-id="19b2c-142">Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-142">A list of comma separated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend
  name: concurrentAppend(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="19b2c-143">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-143">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="19b2c-144">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-144">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="19b2c-145">참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-145">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="19b2c-146">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-146">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="19b2c-147">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-147">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-148">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-148">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-149">Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-149">The Data Lake Store path (starting with '/') of the file to which to append using concurrent append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-150">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-150">The file contents to include when appending to the file.</span></span>  <span data-ttu-id="19b2c-151">최대 콘텐츠 크기는 4MB입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-151">The maximum content size is 4MB.</span></span>  <span data-ttu-id="19b2c-152">4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-152">For content larger than 4MB you must append the content in 4MB chunks.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_2
  name: concurrentAppend(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="19b2c-153">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-153">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="19b2c-154">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-154">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="19b2c-155">참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-155">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="19b2c-156">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-156">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="19b2c-157">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-157">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_1
  name: concurrentAppend(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="19b2c-158">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-158">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="19b2c-159">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-159">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="19b2c-160">참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-160">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="19b2c-161">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-161">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="19b2c-162">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-162">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  name: concurrentAppendWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="19b2c-163">필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-163">Appends to the specified file, optionally first creating the file if it does not yet exist.</span></span> <span data-ttu-id="19b2c-164">이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-164">This method supports multiple concurrent appends to the file.</span></span>

    <span data-ttu-id="19b2c-165">참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-165">NOTE: The target must not contain data added by Create or normal (serial) Append.</span></span> <span data-ttu-id="19b2c-166">ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-166">ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.</span></span> <span data-ttu-id="19b2c-167">ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-167">ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.</span></span>
  syntax:
    content: 'function concurrentAppendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-168">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-168">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-169">Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-169">The Data Lake Store path (starting with '/') of the file to which to append using concurrent append.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-170">파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-170">The file contents to include when appending to the file.</span></span>  <span data-ttu-id="19b2c-171">최대 콘텐츠 크기는 4MB입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-171">The maximum content size is 4MB.</span></span>  <span data-ttu-id="19b2c-172">4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-172">For content larger than 4MB you must append the content in 4MB chunks.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create
  name: create(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-173">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-173">Creates a file with optionally specified content.</span></span> <span data-ttu-id="19b2c-174">참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-174">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-175">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-175">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-176">Data Lake Store 경로 (부터 '/') 파일을 만드십시오.</span><span class="sxs-lookup"><span data-stu-id="19b2c-176">The Data Lake Store path (starting with '/') of the file to create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_2
  name: create(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-177">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-177">Creates a file with optionally specified content.</span></span> <span data-ttu-id="19b2c-178">참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-178">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_1
  name: create(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-179">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-179">Creates a file with optionally specified content.</span></span> <span data-ttu-id="19b2c-180">참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-180">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function create(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  name: createWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '<span data-ttu-id="19b2c-181">선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-181">Creates a file with optionally specified content.</span></span> <span data-ttu-id="19b2c-182">참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-182">NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.</span></span>'
  syntax:
    content: 'function createWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-183">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-183">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-184">Data Lake Store 경로 (부터 '/') 파일을 만드십시오.</span><span class="sxs-lookup"><span data-stu-id="19b2c-184">The Data Lake Store path (starting with '/') of the file to create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod
  name: deleteMethod(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-185">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-185">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-186">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-186">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-187">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-187">The Data Lake Store path (starting with '/') of the file or directory to delete.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_2
  name: deleteMethod(string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-188">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-188">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_1
  name: deleteMethod(string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-189">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-189">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-190">요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-190">Deletes the requested file or directory, optionally recursively.</span></span>
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-191">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-191">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-192">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-192">The Data Lake Store path (starting with '/') of the file or directory to delete.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus
  name: getAclStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-193">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-193">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-194">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-194">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-195">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-195">The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_2
  name: getAclStatus(string, string, Object, ServiceCallback<AclStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-196">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-196">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_1
  name: getAclStatus(string, string, ServiceCallback<AclStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-197">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-197">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  name: getAclStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-198">지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-198">Gets Access Control List (ACL) entries for the specified file or directory.</span></span>
  syntax:
    content: 'function getAclStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-199">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-199">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-200">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-200">The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary
  name: getContentSummary(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-201">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-201">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-202">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-202">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-203">Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-203">The Data Lake Store path (starting with '/') of the file for which to retrieve the summary.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_2
  name: getContentSummary(string, string, Object, ServiceCallback<ContentSummaryResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-204">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-204">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options: Object, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_1
  name: getContentSummary(string, string, ServiceCallback<ContentSummaryResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-205">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-205">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  name: getContentSummaryWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-206">파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-206">Gets the file content summary object specified by the file path.</span></span>
  syntax:
    content: 'function getContentSummaryWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-207">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-207">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-208">Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-208">The Data Lake Store path (starting with '/') of the file for which to retrieve the summary.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus
  name: getFileStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-209">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-209">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-210">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-210">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-211">Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-211">The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_2
  name: getFileStatus(string, string, Object, ServiceCallback<FileStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-212">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-212">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_1
  name: getFileStatus(string, string, ServiceCallback<FileStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-213">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-213">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  name: getFileStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-214">파일 경로 지정 된 파일 상태 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-214">Get the file status object specified by the file path.</span></span>
  syntax:
    content: 'function getFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-215">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-215">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-216">Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-216">The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus
  name: listFileStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-217">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-217">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-218">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-218">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-219">Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-219">The Data Lake Store path (starting with '/') of the directory to list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_2
  name: listFileStatus(string, string, Object, ServiceCallback<FileStatusesResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-220">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-220">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_1
  name: listFileStatus(string, string, ServiceCallback<FileStatusesResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-221">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-221">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  name: listFileStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-222">선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-222">Get the list of file status objects specified by the file path, with optional pagination parameters</span></span>
  syntax:
    content: 'function listFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-223">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-223">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-224">Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-224">The Data Lake Store path (starting with '/') of the directory to list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs
  name: mkdirs(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-225">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-225">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-226">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-226">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-227">Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-227">The Data Lake Store path (starting with '/') of the directory to create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_2
  name: mkdirs(string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-228">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-228">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_1
  name: mkdirs(string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-229">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-229">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirs(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  name: mkdirsWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-230">디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-230">Creates a directory.</span></span>
  syntax:
    content: 'function mkdirsWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-231">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-231">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-232">Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-232">The Data Lake Store path (starting with '/') of the directory to create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries
  name: modifyAclEntries(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-233">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-233">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-234">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-234">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-235">Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-235">The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-236">ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="19b2c-236">The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  name: modifyAclEntries(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-237">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-237">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  name: modifyAclEntries(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-238">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-238">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  name: modifyAclEntriesWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-239">파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-239">Modifies existing Access Control List (ACL) entries on a file or folder.</span></span>
  syntax:
    content: 'function modifyAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-240">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-240">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-241">Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-241">The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-242">ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="19b2c-242">The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat
  name: msConcat(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-243">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-243">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="19b2c-244">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-244">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="19b2c-245">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-245">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-246">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-246">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-247">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-247">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-248">Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-248">A list of Data Lake Store paths (starting with '/') of the source files.</span></span> <span data-ttu-id="19b2c-249">형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span><span class="sxs-lookup"><span data-stu-id="19b2c-249">Must be a comma-separated path list in the format: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_2
  name: msConcat(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-250">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-250">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="19b2c-251">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-251">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="19b2c-252">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-252">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_1
  name: msConcat(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-253">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-253">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="19b2c-254">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-254">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="19b2c-255">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-255">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  name: msConcatWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-256">성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-256">Concatenates the list of source files into the destination file, deleting all source files upon success.</span></span> <span data-ttu-id="19b2c-257">이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-257">This method accepts more source file paths than the Concat method.</span></span> <span data-ttu-id="19b2c-258">이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-258">This method and the parameters it accepts are subject to change for usability in an upcoming version.</span></span>
  syntax:
    content: 'function msConcatWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-259">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-259">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-260">Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-260">The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation.</span></span>
    - id: streamContents
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="19b2c-261">Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-261">A list of Data Lake Store paths (starting with '/') of the source files.</span></span> <span data-ttu-id="19b2c-262">형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span><span class="sxs-lookup"><span data-stu-id="19b2c-262">Must be a comma-separated path list in the format: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open
  name: open(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-263">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-263">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-264">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-264">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-265">Data Lake Store 경로 (부터 '/')의 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-265">The Data Lake Store path (starting with '/') of the file to open.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_2
  name: open(string, string, Object, ServiceCallback<stream.Readable>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-266">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-266">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, options: Object, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_1
  name: open(string, string, ServiceCallback<stream.Readable>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-267">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-267">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function open(accountName: string, path: string, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  name: openWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-268">열고 지정된 된 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-268">Opens and reads from the specified file.</span></span>
  syntax:
    content: 'function openWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-269">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-269">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-270">Data Lake Store 경로 (부터 '/')의 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-270">The Data Lake Store path (starting with '/') of the file to open.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<stream.Readable>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl
  name: removeAcl(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-271">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-271">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-272">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-272">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-273">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-273">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_2
  name: removeAcl(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-274">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-274">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_1
  name: removeAcl(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-275">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-275">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries
  name: removeAclEntries(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-276">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-276">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-277">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-277">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-278">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-278">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-279">ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '</span><span class="sxs-lookup"><span data-stu-id="19b2c-279">The ACL spec included in ACL removal operations in the format '[default:]user|group|other'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_2
  name: removeAclEntries(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-280">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-280">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_1
  name: removeAclEntries(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-281">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-281">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  name: removeAclEntriesWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-282">기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-282">Removes existing Access Control List (ACL) entries for a file or folder.</span></span>
  syntax:
    content: 'function removeAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-283">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-283">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-284">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-284">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-285">ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '</span><span class="sxs-lookup"><span data-stu-id="19b2c-285">The ACL spec included in ACL removal operations in the format '[default:]user|group|other'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  name: removeAclWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-286">지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-286">Removes the existing Access Control List (ACL) of the specified file or directory.</span></span>
  syntax:
    content: 'function removeAclWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-287">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-287">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-288">Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-288">The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl
  name: removeDefaultAcl(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-289">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-289">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-290">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-290">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-291">Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-291">The Data Lake Store path (starting with '/') of the directory with the default ACL being removed.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  name: removeDefaultAcl(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-292">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-292">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  name: removeDefaultAcl(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-293">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-293">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  name: removeDefaultAclWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-294">기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-294">Removes the existing Default Access Control List (ACL) of the specified directory.</span></span>
  syntax:
    content: 'function removeDefaultAclWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-295">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-295">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-296">Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-296">The Data Lake Store path (starting with '/') of the directory with the default ACL being removed.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename
  name: rename(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-297">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-297">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-298">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-298">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-299">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-299">The Data Lake Store path (starting with '/') of the file or directory to move/rename.</span></span>
    - id: destination
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-300">파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로</span><span class="sxs-lookup"><span data-stu-id="19b2c-300">The path to move/rename the file or folder to</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_2
  name: rename(string, string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-301">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-301">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_1
  name: rename(string, string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-302">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-302">Rename a file or directory.</span></span>
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  name: renameWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-303">파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-303">Rename a file or directory.</span></span>
  syntax:
    content: 'function renameWithHttpOperationResponse(accountName: string, path: string, destination: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-304">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-304">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-305">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.</span><span class="sxs-lookup"><span data-stu-id="19b2c-305">The Data Lake Store path (starting with '/') of the file or directory to move/rename.</span></span>
    - id: destination
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-306">파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로</span><span class="sxs-lookup"><span data-stu-id="19b2c-306">The path to move/rename the file or folder to</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl
  name: setAcl(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-307">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-307">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-308">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-308">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-309">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-309">The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-310">ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="19b2c-310">The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_2
  name: setAcl(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-311">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-311">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_1
  name: setAcl(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-312">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-312">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  name: setAclWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-313">파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-313">Sets the Access Control List (ACL) for a file or folder.</span></span>
  syntax:
    content: 'function setAclWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-314">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-314">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-315">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-315">The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL.</span></span>
    - id: aclspec
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-316">ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'</span><span class="sxs-lookup"><span data-stu-id="19b2c-316">The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry
  name: setFileExpiry(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-317">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-317">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="19b2c-318">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-318">This operation can only be executed against files.</span></span> <span data-ttu-id="19b2c-319">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-319">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-320">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-320">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-321">Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-321">The Data Lake Store path (starting with '/') of the file on which to set or remove the expiration time.</span></span>
    - id: expiryOption
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-322">파일에 사용할 만료 종류를 나타냅니다. 1.</span><span class="sxs-lookup"><span data-stu-id="19b2c-322">Indicates the type of expiration to use for the file: 1.</span></span> <span data-ttu-id="19b2c-323">NeverExpire: 만료 시간 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-323">NeverExpire: ExpireTime is ignored.</span></span> <span data-ttu-id="19b2c-324">2.</span><span class="sxs-lookup"><span data-stu-id="19b2c-324">2.</span></span> <span data-ttu-id="19b2c-325">RelativeToNow: 만료 시간 (밀리초) 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-325">RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration date relative to when file expiration is updated.</span></span> <span data-ttu-id="19b2c-326">3.</span><span class="sxs-lookup"><span data-stu-id="19b2c-326">3.</span></span> <span data-ttu-id="19b2c-327">RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-327">RelativeToCreationDate: ExpireTime is an integer in milliseconds representing the expiration date relative to file creation.</span></span> <span data-ttu-id="19b2c-328">4.</span><span class="sxs-lookup"><span data-stu-id="19b2c-328">4.</span></span> <span data-ttu-id="19b2c-329">절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-329">Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.</span></span> <span data-ttu-id="19b2c-330">가능한 값은 다음과 같습니다. 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span><span class="sxs-lookup"><span data-stu-id="19b2c-330">Possible values include: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_2
  name: setFileExpiry(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-331">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-331">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="19b2c-332">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-332">This operation can only be executed against files.</span></span> <span data-ttu-id="19b2c-333">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-333">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_1
  name: setFileExpiry(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-334">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-334">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="19b2c-335">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-335">This operation can only be executed against files.</span></span> <span data-ttu-id="19b2c-336">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-336">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  name: setFileExpiryWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-337">설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-337">Sets or removes the expiration time on the specified file.</span></span> <span data-ttu-id="19b2c-338">이 작업은 파일에 대해만 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-338">This operation can only be executed against files.</span></span> <span data-ttu-id="19b2c-339">폴더 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-339">Folders are not supported.</span></span>
  syntax:
    content: 'function setFileExpiryWithHttpOperationResponse(accountName: string, path: string, expiryOption: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-340">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-340">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-341">Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-341">The Data Lake Store path (starting with '/') of the file on which to set or remove the expiration time.</span></span>
    - id: expiryOption
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-342">파일에 사용할 만료 종류를 나타냅니다. 1.</span><span class="sxs-lookup"><span data-stu-id="19b2c-342">Indicates the type of expiration to use for the file: 1.</span></span> <span data-ttu-id="19b2c-343">NeverExpire: 만료 시간 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-343">NeverExpire: ExpireTime is ignored.</span></span> <span data-ttu-id="19b2c-344">2.</span><span class="sxs-lookup"><span data-stu-id="19b2c-344">2.</span></span> <span data-ttu-id="19b2c-345">RelativeToNow: 만료 시간 (밀리초) 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-345">RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration date relative to when file expiration is updated.</span></span> <span data-ttu-id="19b2c-346">3.</span><span class="sxs-lookup"><span data-stu-id="19b2c-346">3.</span></span> <span data-ttu-id="19b2c-347">RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수가 합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-347">RelativeToCreationDate: ExpireTime is an integer in milliseconds representing the expiration date relative to file creation.</span></span> <span data-ttu-id="19b2c-348">4.</span><span class="sxs-lookup"><span data-stu-id="19b2c-348">4.</span></span> <span data-ttu-id="19b2c-349">절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-349">Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.</span></span> <span data-ttu-id="19b2c-350">가능한 값은 다음과 같습니다. 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span><span class="sxs-lookup"><span data-stu-id="19b2c-350">Possible values include: 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner
  name: setOwner(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-351">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-351">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-352">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-352">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-353">Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-353">The Data Lake Store path (starting with '/') of the file or directory for which to set the owner.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_2
  name: setOwner(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-354">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-354">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_1
  name: setOwner(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-355">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-355">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwner(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  name: setOwnerWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-356">파일 또는 디렉터리의 소유자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-356">Sets the owner of a file or directory.</span></span>
  syntax:
    content: 'function setOwnerWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-357">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-357">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-358">Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-358">The Data Lake Store path (starting with '/') of the file or directory for which to set the owner.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission
  name: setPermission(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-359">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-359">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-360">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-360">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-361">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-361">The Data Lake Store path (starting with '/') of the file or directory for which to set the permission.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_2
  name: setPermission(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-362">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-362">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_1
  name: setPermission(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-363">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-363">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermission(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  name: setPermissionWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="19b2c-364">파일 또는 폴더의 사용 권한을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-364">Sets the permission of the file or folder.</span></span>
  syntax:
    content: 'function setPermissionWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-365">파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-365">The Azure Data Lake Store account to execute filesystem operations on.</span></span>
    - id: path
      type:
      - string
      description: >
        <span data-ttu-id="19b2c-366">Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.</span><span class="sxs-lookup"><span data-stu-id="19b2c-366">The Data Lake Store path (starting with '/') of the file or directory for which to set the permission.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
references:
- uid: Promise<azure-arm-datalake-store.FileOperationResult>
  name: FileOperationResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileOperationResult>
  name: FileOperationResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  name: FileOperationResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.AclStatusResult>
  name: AclStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.AclStatusResult>
  name: AclStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  name: AclStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.ContentSummaryResult>
  name: ContentSummaryResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
  name: ContentSummaryResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  name: ContentSummaryResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusResult>
  name: FileStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusResult>
  name: FileStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  name: FileStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusesResult>
  name: FileStatusesResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
  name: FileStatusesResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  name: FileStatusesResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>>'
    fullName: '>>'
