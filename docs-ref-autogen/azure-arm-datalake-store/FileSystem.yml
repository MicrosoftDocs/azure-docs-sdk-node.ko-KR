### YamlMime:UniversalReference
ms.openlocfilehash: 051668180977efad82270f671a6fb69557e2d712
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52044988"
items:
- uid: azure-arm-datalake-store.FileSystem
  name: FileSystem
  fullName: FileSystem
  children:
  - azure-arm-datalake-store.FileSystem.append
  - azure-arm-datalake-store.FileSystem.append_2
  - azure-arm-datalake-store.FileSystem.append_1
  - azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.checkAccess
  - azure-arm-datalake-store.FileSystem.checkAccess_2
  - azure-arm-datalake-store.FileSystem.checkAccess_1
  - azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concat
  - azure-arm-datalake-store.FileSystem.concat_2
  - azure-arm-datalake-store.FileSystem.concat_1
  - azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.concurrentAppend
  - azure-arm-datalake-store.FileSystem.concurrentAppend_2
  - azure-arm-datalake-store.FileSystem.concurrentAppend_1
  - azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.create
  - azure-arm-datalake-store.FileSystem.create_2
  - azure-arm-datalake-store.FileSystem.create_1
  - azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.deleteMethod
  - azure-arm-datalake-store.FileSystem.deleteMethod_2
  - azure-arm-datalake-store.FileSystem.deleteMethod_1
  - azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getAclStatus
  - azure-arm-datalake-store.FileSystem.getAclStatus_2
  - azure-arm-datalake-store.FileSystem.getAclStatus_1
  - azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getContentSummary
  - azure-arm-datalake-store.FileSystem.getContentSummary_2
  - azure-arm-datalake-store.FileSystem.getContentSummary_1
  - azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.getFileStatus
  - azure-arm-datalake-store.FileSystem.getFileStatus_2
  - azure-arm-datalake-store.FileSystem.getFileStatus_1
  - azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.listFileStatus
  - azure-arm-datalake-store.FileSystem.listFileStatus_2
  - azure-arm-datalake-store.FileSystem.listFileStatus_1
  - azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.mkdirs
  - azure-arm-datalake-store.FileSystem.mkdirs_2
  - azure-arm-datalake-store.FileSystem.mkdirs_1
  - azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.modifyAclEntries
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  - azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  - azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.msConcat
  - azure-arm-datalake-store.FileSystem.msConcat_2
  - azure-arm-datalake-store.FileSystem.msConcat_1
  - azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.open
  - azure-arm-datalake-store.FileSystem.open_2
  - azure-arm-datalake-store.FileSystem.open_1
  - azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAcl
  - azure-arm-datalake-store.FileSystem.removeAcl_2
  - azure-arm-datalake-store.FileSystem.removeAcl_1
  - azure-arm-datalake-store.FileSystem.removeAclEntries
  - azure-arm-datalake-store.FileSystem.removeAclEntries_2
  - azure-arm-datalake-store.FileSystem.removeAclEntries_1
  - azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  - azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  - azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.rename
  - azure-arm-datalake-store.FileSystem.rename_2
  - azure-arm-datalake-store.FileSystem.rename_1
  - azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setAcl
  - azure-arm-datalake-store.FileSystem.setAcl_2
  - azure-arm-datalake-store.FileSystem.setAcl_1
  - azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setFileExpiry
  - azure-arm-datalake-store.FileSystem.setFileExpiry_2
  - azure-arm-datalake-store.FileSystem.setFileExpiry_1
  - azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setOwner
  - azure-arm-datalake-store.FileSystem.setOwner_2
  - azure-arm-datalake-store.FileSystem.setOwner_1
  - azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  - azure-arm-datalake-store.FileSystem.setPermission
  - azure-arm-datalake-store.FileSystem.setPermission_2
  - azure-arm-datalake-store.FileSystem.setPermission_1
  - azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append
  name: append(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '사용 되는 지정된 된 파일에 추가 하는 일련의 합니다. 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.  최대 콘텐츠 크기는 4MB입니다.  4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_2
  name: append(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '사용 되는 지정된 된 파일에 추가 하는 일련의 합니다. 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.append_1
  name: append(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '사용 되는 지정된 된 파일에 추가 하는 일련의 합니다. 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.'
  syntax:
    content: 'function append(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
  name: appendWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '사용 되는 지정된 된 파일에 추가 하는 일련의 합니다. 참고:  대상에 ConcurrentAppend에 의해 추가 된 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다.'
  syntax:
    content: 'function appendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')을 추가할 파일입니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.  최대 콘텐츠 크기는 4MB입니다.  4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess
  name: checkAccess(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.
    - id: fsaction
      type:
      - string
      description: >
        정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_2
  name: checkAccess(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccess_1
  name: checkAccess(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.
  syntax:
    content: 'function checkAccess(accountName: string, path: string, fsaction: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: fsaction
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
  name: checkAccessWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정된 된 액세스를 지정된 된 경로에서 사용할 수 있는지 확인 합니다.
  syntax:
    content: 'function checkAccessWithHttpOperationResponse(accountName: string, path: string, fsaction: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 액세스 권한 확인입니다.
    - id: fsaction
      type:
      - string
      description: >
        정규식 패턴과 일치 하는 문자열 형태로 시스템 작업 읽기/쓰기/실행 파일 ' [rwx-]{3}'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat
  name: concat(string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.
    - id: sources
      type:
      - string[]
      description: >
        Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_2
  name: concat(string, string, string[], Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concat_1
  name: concat(string, string, string[], ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.
  syntax:
    content: 'function concat(accountName: string, path: string, sources: string[], callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: sources
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
  name: concatWithHttpOperationResponse(string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 제거 하 여 대상 파일에 소스 파일의 목록을 연결 합니다.
  syntax:
    content: 'function concatWithHttpOperationResponse(accountName: string, path: string, sources: string[], options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.
    - id: sources
      type:
      - string[]
      description: >
        Data Lake Store 경로 구분 하는 쉼표로 목록을 (부터 '/') 파일을 연결 하는 순서는 이러한 연결 되어야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend
  name: concurrentAppend(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기. 이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.

    참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다. ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.  최대 콘텐츠 크기는 4MB입니다.  4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_2
  name: concurrentAppend(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기. 이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.

    참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다. ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppend_1
  name: concurrentAppend(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기. 이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.

    참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다. ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.
  syntax:
    content: 'function concurrentAppend(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
  name: concurrentAppendWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    필요에 따라 지정된 된 파일에 추가 합니다. 아직 존재 하지 않는 경우 먼저 파일을 만들기. 이 메서드를 지 원하는 여러 동시 파일에 추가 합니다.

    참고:  대상에 만들거나 일반 (순차적) 추가 하 여 추가 데이터를 포함할 수 없습니다. ConcurrentAppend 및 추가; 서로 교환해 서 사용할 수 없습니다. 대상 파일을 수정한 후 다음 중 하나를 사용 하 여 옵션을 추가, 대상 파일에서 다른 추가 옵션을 사용할 수 없습니다. ConcurrentAppend 순서를 보장 하지 않습니다 및 대상 파일에 중복 된 데이터에 발생할 수 있습니다.
  syntax:
    content: 'function concurrentAppendWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 동시 사용 하 여 추가을 추가 합니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        파일에 추가 하는 경우를 포함 하도록 파일 내용입니다.  최대 콘텐츠 크기는 4MB입니다.  4MB 보다 큰 콘텐츠에 대해 콘텐츠를 4MB 청크로 추가 해야 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create
  name: create(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다. 참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.'
  syntax:
    content: 'function create(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일을 만드십시오.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_2
  name: create(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다. 참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.'
  syntax:
    content: 'function create(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.create_1
  name: create(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: '선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다. 참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.'
  syntax:
    content: 'function create(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
  name: createWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: '선택적으로 지정 된 콘텐츠를 사용 하 여 파일을 만듭니다. 참고:  콘텐츠를 제공 하는 경우 결과 파일을 ConcurrentAppend를 사용 하 여 수정할 수 없습니다.'
  syntax:
    content: 'function createWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일을 만드십시오.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod
  name: deleteMethod(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_2
  name: deleteMethod(string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethod_1
  name: deleteMethod(string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.
  syntax:
    content: 'function deleteMethod(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 요청 된 파일 또는 디렉터리를 선택적으로 재귀적으로 삭제합니다.
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 삭제 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus
  name: getAclStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_2
  name: getAclStatus(string, string, Object, ServiceCallback<AclStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatus_1
  name: getAclStatus(string, string, ServiceCallback<AclStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.
  syntax:
    content: 'function getAclStatus(accountName: string, path: string, callback: ServiceCallback<AclStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.AclStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
  name: getAclStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 가져옵니다.
  syntax:
    content: 'function getAclStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 가져오고입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary
  name: getContentSummary(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_2
  name: getContentSummary(string, string, Object, ServiceCallback<ContentSummaryResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, options: Object, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummary_1
  name: getContentSummary(string, string, ServiceCallback<ContentSummaryResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.
  syntax:
    content: 'function getContentSummary(accountName: string, path: string, callback: ServiceCallback<ContentSummaryResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.ContentSummaryResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
  name: getContentSummaryWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 콘텐츠 요약에서 지정한 개체를 파일 경로 가져옵니다.
  syntax:
    content: 'function getContentSummaryWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 요약을 검색 하는 파일입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus
  name: getFileStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 경로 지정 된 파일 상태 개체를 가져옵니다.
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_2
  name: getFileStatus(string, string, Object, ServiceCallback<FileStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 경로 지정 된 파일 상태 개체를 가져옵니다.
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatus_1
  name: getFileStatus(string, string, ServiceCallback<FileStatusResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 경로 지정 된 파일 상태 개체를 가져옵니다.
  syntax:
    content: 'function getFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
  name: getFileStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 경로 지정 된 파일 상태 개체를 가져옵니다.
  syntax:
    content: 'function getFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일의 상태를 검색할 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus
  name: listFileStatus(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_2
  name: listFileStatus(string, string, Object, ServiceCallback<FileStatusesResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, options: Object, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatus_1
  name: listFileStatus(string, string, ServiceCallback<FileStatusesResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.
  syntax:
    content: 'function listFileStatus(accountName: string, path: string, callback: ServiceCallback<FileStatusesResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileStatusesResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
  name: listFileStatusWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 선택적인 페이지 매김 매개 변수를 사용 하 여 파일 경로 의해 지정 된 파일 상태 개체의 목록을 가져옵니다.
  syntax:
    content: 'function listFileStatusWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 목록에 디렉터리의 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs
  name: mkdirs(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 디렉터리를 만듭니다.
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_2
  name: mkdirs(string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 디렉터리를 만듭니다.
  syntax:
    content: 'function mkdirs(accountName: string, path: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirs_1
  name: mkdirs(string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 디렉터리를 만듭니다.
  syntax:
    content: 'function mkdirs(accountName: string, path: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
  name: mkdirsWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 디렉터리를 만듭니다.
  syntax:
    content: 'function mkdirsWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')을 만들 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries
  name: modifyAclEntries(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_2
  name: modifyAclEntries(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_1
  name: modifyAclEntries(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.
  syntax:
    content: 'function modifyAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
  name: modifyAclEntriesWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 기존 액세스 제어 목록 (ACL) 항목을 수정합니다.
  syntax:
    content: 'function modifyAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 수정 하 고 ACL 사용 하 여 디렉터리의 합니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 수정 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat
  name: msConcat(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다. 이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다. 이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다. 형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_2
  name: msConcat(string, string, stream.Readable, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다. 이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다. 이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcat_1
  name: msConcat(string, string, stream.Readable, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다. 이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다. 이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.
  syntax:
    content: 'function msConcat(accountName: string, path: string, streamContents: stream.Readable, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: streamContents
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
  name: msConcatWithHttpOperationResponse(string, string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 성공 하면 모든 소스 파일을 삭제 하 여 대상 파일에 소스 파일의 목록을 연결 합니다. 이 메서드는 Concat 방법 보다 더 많은 소스 파일 경로 허용합니다. 이 메서드를 허용 하는 매개 변수를와 유용성이 향후 버전에서 변경 될 수 있습니다.
  syntax:
    content: 'function msConcatWithHttpOperationResponse(accountName: string, path: string, streamContents: stream.Readable, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 대상 파일 연결에서 결과입니다.
    - id: streamContents
      type:
      - stream.Readable
      description: >
        Data Lake Store 경로 목록을 (부터 '/')의 원본 파일입니다. 형식으로 쉼표로 구분 된 경로 목록 이어야 합니다: sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open
  name: open(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 열고 지정된 된 파일에서 읽습니다.
  syntax:
    content: 'function open(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 파일을 엽니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_2
  name: open(string, string, Object, ServiceCallback<stream.Readable>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 열고 지정된 된 파일에서 읽습니다.
  syntax:
    content: 'function open(accountName: string, path: string, options: Object, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.open_1
  name: open(string, string, ServiceCallback<stream.Readable>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 열고 지정된 된 파일에서 읽습니다.
  syntax:
    content: 'function open(accountName: string, path: string, callback: ServiceCallback<stream.Readable>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<stream.Readable>
      description: ''
    return:
      type:
      - Promise<stream.Readable>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
  name: openWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 열고 지정된 된 파일에서 읽습니다.
  syntax:
    content: 'function openWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 파일을 엽니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<stream.Readable>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl
  name: removeAcl(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_2
  name: removeAcl(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.
  syntax:
    content: 'function removeAcl(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAcl_1
  name: removeAcl(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.
  syntax:
    content: 'function removeAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries
  name: removeAclEntries(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_2
  name: removeAclEntries(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntries_1
  name: removeAclEntries(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.
  syntax:
    content: 'function removeAclEntries(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
  name: removeAclEntriesWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL) 항목을 제거 합니다.
  syntax:
    content: 'function removeAclEntriesWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 제거 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른 '
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
  name: removeAclWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 지정 된 파일 또는 디렉터리의 기존 액세스 제어 목록 (ACL)을 제거합니다.
  syntax:
    content: 'function removeAclWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 제거할 ACL 사용 하 여 디렉터리의 합니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl
  name: removeDefaultAcl(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
  name: removeDefaultAcl(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
  name: removeDefaultAcl(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.
  syntax:
    content: 'function removeDefaultAcl(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
  name: removeDefaultAclWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 기존 기본 액세스 제어 목록 (ACL) 지정된 된 디렉터리의을 제거합니다.
  syntax:
    content: 'function removeDefaultAclWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 기본 제거할 ACL 사용 하 여 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename
  name: rename(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 이름을 바꿉니다.
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.
    - id: destination
      type:
      - string
      description: >
        파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_2
  name: rename(string, string, string, Object, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 이름을 바꿉니다.
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, options: Object, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.rename_1
  name: rename(string, string, string, ServiceCallback<FileOperationResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 이름을 바꿉니다.
  syntax:
    content: 'function rename(accountName: string, path: string, destination: string, callback: ServiceCallback<FileOperationResult>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: destination
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
      description: ''
    return:
      type:
      - Promise<azure-arm-datalake-store.FileOperationResult>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
  name: renameWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 이름을 바꿉니다.
  syntax:
    content: 'function renameWithHttpOperationResponse(accountName: string, path: string, destination: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리를 이동/이름 바꾸기.
    - id: destination
      type:
      - string
      description: >
        파일 또는 폴더를 이동/이름 바꾸기.에 대 한 경로
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl
  name: setAcl(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_2
  name: setAcl(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAcl_1
  name: setAcl(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.
  syntax:
    content: 'function setAcl(accountName: string, path: string, aclspec: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: aclspec
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
  name: setAclWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더에 대 한 액세스 제어 목록 (ACL)을 설정합니다.
  syntax:
    content: 'function setAclWithHttpOperationResponse(accountName: string, path: string, aclspec: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 ACL을 설정 하는 중입니다.
    - id: aclspec
      type:
      - string
      description: >
        ACL 사양 형식으로 ACL 만들기 작업에 포함 된 ' [기본값:] 사용자 | 그룹 | 다른:: r |-w |-x |-'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry
  name: setFileExpiry(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다. 이 작업은 파일에 대해만 실행할 수 있습니다. 폴더 지원 되지 않습니다.
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.
    - id: expiryOption
      type:
      - string
      description: >
        파일에 사용할 만료 종류를 나타냅니다. 1. NeverExpire: 만료 시간 무시 됩니다. 2. RelativeToNow: 만료 시간 (밀리초) 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수가 합니다. 3. RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수가 합니다. 4. 절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다. 가능한 값은 다음과 같습니다. 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_2
  name: setFileExpiry(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다. 이 작업은 파일에 대해만 실행할 수 있습니다. 폴더 지원 되지 않습니다.
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiry_1
  name: setFileExpiry(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다. 이 작업은 파일에 대해만 실행할 수 있습니다. 폴더 지원 되지 않습니다.
  syntax:
    content: 'function setFileExpiry(accountName: string, path: string, expiryOption: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: expiryOption
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
  name: setFileExpiryWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 설정 하거나 지정된 된 파일에서 만료 시간을 제거 합니다. 이 작업은 파일에 대해만 실행할 수 있습니다. 폴더 지원 되지 않습니다.
  syntax:
    content: 'function setFileExpiryWithHttpOperationResponse(accountName: string, path: string, expiryOption: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/')의 만료 시간을 제거 하는 파일입니다.
    - id: expiryOption
      type:
      - string
      description: >
        파일에 사용할 만료 종류를 나타냅니다. 1. NeverExpire: 만료 시간 무시 됩니다. 2. RelativeToNow: 만료 시간 (밀리초) 파일 만료 업데이트 될 때 기준으로 만료 날짜를 나타내는 정수가 합니다. 3. RelativeToCreationDate: 만료 시간 (밀리초) 파일 만들기를 기준으로 만료 날짜를 나타내는 정수가 합니다. 4. 절대: 만료 시간 정수가 밀리초에서 1970 년 1/1/를 기준으로 하 여 Unix 타임 스탬프로 00시: 00입니다. 가능한 값은 다음과 같습니다. 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner
  name: setOwner(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 소유자를 설정합니다.
  syntax:
    content: 'function setOwner(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_2
  name: setOwner(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 소유자를 설정합니다.
  syntax:
    content: 'function setOwner(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwner_1
  name: setOwner(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 소유자를 설정합니다.
  syntax:
    content: 'function setOwner(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
  name: setOwnerWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 디렉터리의 소유자를 설정합니다.
  syntax:
    content: 'function setOwnerWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일의 소유자를 설정 하려는 디렉터리입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission
  name: setPermission(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더의 사용 권한을 설정합니다.
  syntax:
    content: 'function setPermission(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_2
  name: setPermission(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더의 사용 권한을 설정합니다.
  syntax:
    content: 'function setPermission(accountName: string, path: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermission_1
  name: setPermission(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더의 사용 권한을 설정합니다.
  syntax:
    content: 'function setPermission(accountName: string, path: string, callback: ServiceCallback<void>)'
    parameters:
    - id: accountName
      type:
      - string
      description: ''
    - id: path
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-datalake-store
- uid: azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
  name: setPermissionWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 파일 또는 폴더의 사용 권한을 설정합니다.
  syntax:
    content: 'function setPermissionWithHttpOperationResponse(accountName: string, path: string, options?: Object)'
    parameters:
    - id: accountName
      type:
      - string
      description: >
        파일 시스템 작업을 실행 하려면 Azure Data Lake Store 계정입니다.
    - id: path
      type:
      - string
      description: >
        Data Lake Store 경로 (부터 '/') 파일 또는 디렉터리 권한을 설정 하려면입니다.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-datalake-store
references:
- uid: Promise<azure-arm-datalake-store.FileOperationResult>
  name: FileOperationResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileOperationResult>
  name: FileOperationResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
  name: FileOperationResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileOperationResult
    fullName: FileOperationResult
    uid: azure-arm-datalake-store.FileOperationResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.AclStatusResult>
  name: AclStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.AclStatusResult>
  name: AclStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
  name: AclStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: AclStatusResult
    fullName: AclStatusResult
    uid: azure-arm-datalake-store.AclStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.ContentSummaryResult>
  name: ContentSummaryResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
  name: ContentSummaryResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
  name: ContentSummaryResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: ContentSummaryResult
    fullName: ContentSummaryResult
    uid: azure-arm-datalake-store.ContentSummaryResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusResult>
  name: FileStatusResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusResult>
  name: FileStatusResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
  name: FileStatusResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusResult
    fullName: FileStatusResult
    uid: azure-arm-datalake-store.FileStatusResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-datalake-store.FileStatusesResult>
  name: FileStatusesResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
  name: FileStatusesResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
  name: FileStatusesResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: FileStatusesResult
    fullName: FileStatusesResult
    uid: azure-arm-datalake-store.FileStatusesResult
  - name: '>>'
    fullName: '>>'
