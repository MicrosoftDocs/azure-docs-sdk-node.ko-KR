### YamlMime:UniversalReference
ms.openlocfilehash: 7202147c6c89f0015f6c9c5d602ffaeb968005da
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029497"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.query_1'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="1c216-101">새 컨테이너를 만들고 읽기/쿼리는 모든 컨테이너에 대 한 작업</span><span class="sxs-lookup"><span data-stu-id="1c216-101">Operations for creating new containers, and reading/querying all containers</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers(Database, ClientContext)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="1c216-102">컨테이너를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-102">Creates a container.</span></span>

    <span data-ttu-id="1c216-103">컨테이너는 항목에 대 한 명명 된 논리적 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-103">A container is a named logical container for items.</span></span>


    <span data-ttu-id="1c216-104">데이터베이스 0 개 이상의 명명 된 컨테이너를 포함할 수 있습니다 및 각 컨테이너 0 개 이상의 JSON 항목으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-104">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="1c216-105">스키마가 없음에도, 컨테이너의 항목 필요가 없습니다 동일한 구조 또는 필드를 공유 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-105">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="1c216-106">컨테이너 응용 프로그램 리소스와 되므로 마스터 키 또는 리소스 키를 사용 하 여 승인을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-106">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="1c216-107">컨테이너의 본문을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-107">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="1c216-108">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="1c216-109">경우 컨테이너가 만들고, 그렇지 않은 경우이 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-109">Checks if a Container exists, and, if it doesn't, creates it.</span></span>

    <span data-ttu-id="1c216-110">이렇게 하면 읽기 작업의 id를 기준으로 `body`, 있으면 없는, 만들기 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="1c216-111">출력에 기본이 아닌 속성 (예: 인덱싱 정책/etc)에서 전달 된 본문 일치 하는지 확인 해야 컨테이너는 항목에 대 한 명명 된 논리적 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-111">You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.) A container is a named logical container for items.</span></span>


    <span data-ttu-id="1c216-112">데이터베이스 0 개 이상의 명명 된 컨테이너를 포함할 수 있습니다 및 각 컨테이너 0 개 이상의 JSON 항목으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-112">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="1c216-113">스키마가 없음에도, 컨테이너의 항목 필요가 없습니다 동일한 구조 또는 필드를 공유 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-113">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="1c216-114">컨테이너 응용 프로그램 리소스와 되므로 마스터 키 또는 리소스 키를 사용 하 여 승인을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-114">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="1c216-115">컨테이너의 본문을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-115">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="1c216-116">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-116">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1c216-117">모든 컨테이너를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-117">Queries all containers.</span></span>
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="1c216-118">작업에 대 한 쿼리 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-118">Query configuration for the operation.</span></span> <span data-ttu-id="1c216-119">참조 <xref:SqlQuerySpec> 쿼리를 구성 하는 방법에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-119">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="1c216-120">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-120">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1c216-121">모든 컨테이너를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-121">Queries all containers.</span></span>
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="1c216-122">작업에 대 한 쿼리 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-122">Query configuration for the operation.</span></span> <span data-ttu-id="1c216-123">참조 <xref:SqlQuerySpec> 쿼리를 구성 하는 방법에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-123">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="1c216-124">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-124">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1c216-125">모든 컨테이너를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-125">Read all containers.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="1c216-126">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c216-126">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  name: Database
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  name: ContainerDefinition
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  name: ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
