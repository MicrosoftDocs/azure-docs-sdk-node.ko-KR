### YamlMime:UniversalReference
ms.openlocfilehash: e9c942e1c15d221260137950bb93d6df02a16008
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 08/12/2018
ms.locfileid: "40066005"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="11c1f-101">새 데이터베이스를 만들고 읽기/쿼리는 모든 데이터베이스에 대 한 작업</span><span class="sxs-lookup"><span data-stu-id="11c1f-101">Operations for creating new databases, and reading/querying all databases</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="11c1f-102">데이터베이스를 만들기 위한 요청을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-102">Send a request for creating a database.</span></span>

    <span data-ttu-id="11c1f-103">데이터베이스는 사용자, 사용 권한 및 컨테이너의 집합을 관리합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-103">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="11c1f-104">각 Azure Cosmos DB 데이터베이스 계정은 여러 독립적인 명명 된 데이터에 대 한 논리적 컨테이너 되 고 있는 데이터베이스를 사용 하 여 데이터베이스를 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-104">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="11c1f-105">각 데이터베이스에 하나 이상의 문서에 포함 하는 각각 하나 이상의 컨테이너를 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-105">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="11c1f-106">데이터베이스 되므로 관리 리소스를 서비스 마스터 키에 액세스 하 고 사용자 Api를 사용 하 여 모든 작업을 완료 하기 위해 필요한 수 됩니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-106">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="11c1f-107">합니다 <xref:DatabaseDefinition> 나타내는 <xref:Database> 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-107">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="11c1f-108">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="11c1f-109">데이터베이스가 있는 경우 및이 만드는 그렇지 않은 경우를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-109">Check if a database exists, and if it doesn't, create it.</span></span>

    <span data-ttu-id="11c1f-110">이렇게 하면 읽기 작업의 id를 기준으로 `body`, 있으면 없는, 만들기 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="11c1f-111">데이터베이스는 사용자, 사용 권한 및 컨테이너의 집합을 관리합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-111">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="11c1f-112">각 Azure Cosmos DB 데이터베이스 계정은 여러 독립적인 명명 된 데이터에 대 한 논리적 컨테이너 되 고 있는 데이터베이스를 사용 하 여 데이터베이스를 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-112">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="11c1f-113">각 데이터베이스에 하나 이상의 문서에 포함 하는 각각 하나 이상의 컨테이너를 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-113">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="11c1f-114">데이터베이스 되므로 관리 리소스를 서비스 마스터 키에 액세스 하 고 사용자 Api를 사용 하 여 모든 작업을 완료 하기 위해 필요한 수 됩니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-114">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="11c1f-115">합니다 <xref:DatabaseDefinition> 나타내는 <xref:Database> 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-115">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="11c1f-116">모든 데이터베이스를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-116">Queries all databases.</span></span>
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="11c1f-117">작업에 대 한 쿼리 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-117">Query configuration for the operation.</span></span> <span data-ttu-id="11c1f-118">참조 <xref:SqlQuerySpec> 쿼리를 구성 하는 방법에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-118">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="11c1f-119">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-119">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="11c1f-120">모든 데이터베이스를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-120">Reads all databases.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="11c1f-121">응답 페이지 크기, 연속 토큰 등과 같은 옵션을 설정 하려면이 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="11c1f-121">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
