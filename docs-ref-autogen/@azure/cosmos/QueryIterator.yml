### YamlMime:UniversalReference
ms.openlocfilehash: 191cfc4fa4e9d81715994e7d0270373adb0a73b0
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 08/22/2018
ms.locfileid: "41701701"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="cd799-101">통과 및 Azure Cosmos DB 데이터베이스 서비스의 응답에 반복을 사용 하도록 설정 하는 피드 또는 쿼리 응답을 implmenetation QueryIterator 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="cd799-102">현재는 QueryIterator 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="cd799-103">피드의 다음 일괄 처리를 검색 하 고 함수에 배열 전달</span><span class="sxs-lookup"><span data-stu-id="cd799-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: forEach
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="cd799-104">쿼리에서 반환 된 각 항목에 대해 지정 된 콜백을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="cd799-105">순차적으로 실행 각 콜백에 다음을 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="cd799-106">지정 된 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-106">Specified callback.</span></span>

        <span data-ttu-id="cd799-107">첫 번째 매개 변수는 결과, 두 번째 매개 변수 (선택 사항)는 현재 헤더 개체 상태, 세 번째 매개 변수 (선택 사항)는 현재 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="cd799-108">자세한 없는 콜백이 false 결과 중 하나는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="cd799-109">완료 될 때까지 결과 생성 하는 비동기 반복기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="cd799-110">참고: AsyncIterators는 매우 새로운 기능 및 코드에서 사용 하기 위해 polyfils/등을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="cd799-111">TypeScript를 사용 하는 경우에 이상으로 긴 ES6 대상으로 다음 polyfill를 사용할 수 있으며 이상 노드 6에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="cd799-112">다음 요소는 QueryIterator에 대해 제공 된 함수를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd799-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="cd799-113">시작 부분에는 QueryIterator를 다시 설정 하 고 내부 리소스를 모두 선택 취소</span><span class="sxs-lookup"><span data-stu-id="cd799-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="cd799-114">피드의 요소를 모두 검색 하 고 함수에 배열 전달</span><span class="sxs-lookup"><span data-stu-id="cd799-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>
