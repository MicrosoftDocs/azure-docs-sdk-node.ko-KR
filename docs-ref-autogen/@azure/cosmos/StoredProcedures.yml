### YamlMime:UniversalReference
ms.openlocfilehash: 4949d9b5a5a747c2da4939a5267479f65972001c
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029317"
items:
- uid: '@azure/cosmos.StoredProcedures'
  name: StoredProcedures
  fullName: StoredProcedures
  children:
  - '@azure/cosmos.StoredProcedures.container'
  - '@azure/cosmos.StoredProcedures.create'
  - '@azure/cosmos.StoredProcedures.query'
  - '@azure/cosmos.StoredProcedures.query_1'
  - '@azure/cosmos.StoredProcedures.readAll'
  - '@azure/cosmos.StoredProcedures.upsert'
  langs:
  - typeScript
  type: class
  summary: >
    생성, 삽입, 또는 읽기/쿼리는 모든 저장 프로시저에 대 한 작업입니다.

    읽기, 바꾸기, 삭제 또는 id 별로 특정 한 기존 저장된 프로시저를 실행 하는 작업을 참조 하세요. `container.storedProcedure()`합니다.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.container'
  name: container
  fullName: container
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'container: Container'
    return:
      type:
      - '@azure/cosmos.Container'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.create'
  name: create(StoredProcedureDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    저장 프로시저를 만듭니다.

    Azure Cosmos DB는 저장된 프로시저를 저장소 계층에 있는 항목 컨테이너에 대해 직접 실행할 수 있습니다. 스크립트는 지정된 된 컨테이너의 기본 저장소 파티션에 ACID 트랜잭션에서 실행 됩니다. 자세한 내용은 서버 쪽 JavaScript API 설명서를 참조 하십시오.
  syntax:
    content: 'function create(body: StoredProcedureDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.StoredProcedureDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.StoredProcedureResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: 모든 저장 프로시저를 쿼리 합니다.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: 작업에 대 한 쿼리 구성 합니다. 참조 <xref:SqlQuerySpec> 쿼리를 구성 하는 방법에 대 한 자세한 내용은 합니다.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: 모든 저장 프로시저를 쿼리 합니다.
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: 작업에 대 한 쿼리 구성 합니다. 참조 <xref:SqlQuerySpec> 쿼리를 구성 하는 방법에 대 한 자세한 내용은 합니다.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: 모든 저장된 프로시저를 읽습니다.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.StoredProcedureDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.StoredProcedures.upsert'
  name: upsert(StoredProcedureDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >+
    Upsert는 저장 프로시저입니다.

    Azure Cosmos DB는 저장된 프로시저를 저장소 계층에 있는 문서 컨테이너에 대해 직접 실행할 수 있습니다. 스크립트는 지정된 된 컨테이너의 기본 저장소 파티션에 ACID 트랜잭션에서 실행 됩니다. 자세한 내용은 서버 쪽 JavaScript API 설명서를 참조 하십시오.

  syntax:
    content: 'function upsert(body: StoredProcedureDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.StoredProcedureDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.StoredProcedureResponse>
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Container'
  name: Container
  spec.typeScript:
  - name: Container
    fullName: Container
    uid: '@azure/cosmos.Container'
- uid: '@azure/cosmos.StoredProcedureDefinition'
  name: StoredProcedureDefinition
  spec.typeScript:
  - name: StoredProcedureDefinition
    fullName: StoredProcedureDefinition
    uid: '@azure/cosmos.StoredProcedureDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.StoredProcedureResponse>
  name: StoredProcedureResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: StoredProcedureResponse
    fullName: StoredProcedureResponse
    uid: '@azure/cosmos.StoredProcedureResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.StoredProcedureDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: StoredProcedureDefinition
    fullName: StoredProcedureDefinition
    uid: '@azure/cosmos.StoredProcedureDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
