### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      사용 하도록 설정 하는 세션에서 메시지를 받는 SessionReceiver 클래스를 사용할 수 있습니다 큐 또는 구독 또는 일괄 처리에서 처리기를 등록 합니다.
      사용 된 `createReceiver` QueueClient 또는 SubscriptionClient SessionReceiver를 인스턴스화하는 함수입니다.
      SessionReceiver 클래스가 기본 AMQP 수신기 연결을 통해 추상화입니다.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      기본 AMQP 수신자가 링크를 닫습니다.
      종료 되 면 추가 작업에 대 한 수신기를 사용할 수 없습니다.
      사용 된 `createReceiver` QueueClient 또는 SubscriptionClient 새 수신기를 인스턴스화하는 함수
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      수신기에서 메시지를 통한 비동기 반복기를 가져옵니다.
      다른 수신 작업을 동일한 수신기에서 진행 중인 경우 오류를 throw 합니다. 확실 하지 않은 경우가 다른 작업 실행을 수신 하는지 여부를 확인 합니다 `isReceivingMessages` 수신기의 속성입니다.

      반복기는 분별로 새 메시지를 가져올 수 없는 경우 `undefined` 반환 됩니다
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '세션의 상태를 가져옵니다. 에 세션 상태에 대 한 자세한 참조 [세션 상태](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 반환 `true` 수신기가 닫힌 경우. 하거나 생성 하는 클라이언트 또는 자체 수신기가 닫혀 있으므로 닫힌 발생할 수 있습니다.
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      수신기가 있는지 여부를 메시지 수신 현재 여부를 나타냅니다.
      반환 될 때이 true 이면 새 `registerMessageHandler()` 또는 `receiveMessages()` 호출할 수 없습니다.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      활성 메시지의 다음 일괄 처리를 가져옵니다 (deadlettered 메시지가 없는 하지만 지연 등)은 현재 세션에서.
      - 첫 번째 호출은 `peek()` 첫 번째 활성화 메시지를 인출 합니다. 각 후속 호출에서 후속 메시지를 페치합니다.
      - 와 달리를 `received` 메시지를 `peeked` 메시지는 메시지의 읽기 전용 버전입니다.
      `Completed/Abandoned/Deferred/Deadlettered`일 수 없습니다. 이 대 한 잠금을 갱신할 수 없습니다.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: 메시지의 최대 수입니다. 기본값은 `1`합니다.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      원하는 수의 활성 메시지를 관찰 합니다. (메시지를 전달 실패 하지 않도록 하지만 지연 등)에서 현재 세션에서 지정 된 시퀀스 번호입니다.
      - 와 달리를 `received` 메시지를 `peeked` 메시지는 메시지의 읽기 전용 버전입니다.
      `Completed/Abandoned/Deferred/Deadlettered`일 수 없습니다. 이 대 한 잠금을 갱신할 수 없습니다.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: 메시지를 읽을 수 있는 위치에서 시퀀스 번호입니다.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 로 식별 되는 지연 된 메시지를 확인 하는 약속을 반환 합니다 지정 `sequenceNumber`합니다.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 수신 해야 하는 메시지의 시퀀스 번호입니다.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 식별 하는 지연 된 메시지 배열에 확인 되는 프라미스를 반환 하 여 지정 된 `sequenceNumbers`합니다.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 배열 수신 해야 하는 메시지 시퀀스 번호입니다.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      큐/구독에서 메시지의 배열을 확인 되는 약속을 기반으로 반환 수 및 시간 제한 지정 된 AMQP 수신기를 통해 연결 합니다.
      다른 수신 작업을 동일한 수신기에서 진행 중인 경우 오류를 throw 합니다. 확실 하지 않은 경우가 다른 작업 실행을 수신 하는지 여부를 확인 합니다 `isReceivingMessages` 수신기의 속성입니다.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: 큐/구독에서 수신 하는 메시지의 최대 수입니다.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            최대 대기 시간 (초)는 첫 번째 메시지를 받는 수신기 기다려야 합니다. 이 시간을 기준으로 메시지가 수신 되 면 반환 된 프라미스를 빈 배열을 확인을 가져옵니다.
            - **기본**: `60` 시간 (초)입니다.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: 이 수신기의 receiveMode를 나타냅니다.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      큐/구독에서 AMQP 수신기 연결을 통해 들어오는 메시지 스트림을 처리 하는 처리기를 등록 합니다.
      메시지 수신을 중지 하려면 호출 `close()` 는 SessionReceiver에 있습니다.
      다른 수신 작업을 동일한 수신기에서 진행 중인 경우 오류를 throw 합니다. 확실 하지 않은 경우가 다른 작업 실행을 수신 하는지 여부를 확인 합니다 `isReceivingMessages` 수신기의 속성입니다.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: 들어오는 각 메시지를 처리 하는 것에 대 한 처리기입니다.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: 수신 하거나 메시지를 처리 하는 동안 발생 하는 모든 오류에 대 한 처리기입니다.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            여부 메시지 자동으로 완료 해야 또는 세션에 대 한 잠금을 자동으로 갱신 해야 하는 경우를 제어 하는 옵션입니다. 동시에 처리 되어야 하는 메시지의 최대 수를 제어할 수 있습니다. 새 메시지에 대 한 수신기를 닫기 전에 대기 하는 시간을 나타내는 시간 (초)의 제한 시간을 제공할 수도 있습니다.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      큐/구독을 만드는 동안 지정 된 기간 동안 세션에서 잠금을 갱신합니다.
      - 확인 된 `sessionLockedUntilUtc` 잠금이 만료 될 때 시간 SessionReceiver 속성입니다.
      - 세션에서 잠금이 만료 되는 경우
          - 이 수신기를 사용 하 여 메시지가 더 이상 받을 수
          - 메시지를 확인 하지는 경우 (중 하나를 사용 하 여 `complete()`, `defer()` 또는 `deadletter()`세션 전에 잠금이 만료 되 면 차례로 수신 작업을 다시 다음 큐/구독에서에서 메시지 땅 합니다.
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      이 수신기는 메시지를 받을 세션의 id입니다.
      AMQP 수신자가 링크 된 성공적으로를 설정 해야 세션에 대해 정의 되지 않은 반환 됩니다.
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      세션이 잠깁니다 UTC 시간입니다.
      때마다 `renewSessionLock()` 는 호출이 이번 업데이트 현재 시간 더하기 지정 된 잠금 기간에 큐/구독을 만드는 중입니다.

      AMQP 수신자가 링크 된 성공적으로를 설정 해야 세션에 대해 정의 되지 않은 반환 됩니다.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: '세션의 상태를 설정 합니다. 에 세션 상태에 대 한 자세한 참조 [세션 상태](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            설정 해야 하는 상태입니다.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'