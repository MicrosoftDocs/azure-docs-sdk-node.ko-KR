### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessage'
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.scheduleMessage'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.send'
      - '@azure/service-bus.Sender.sendBatch'
    langs:
      - typeScript
    type: class
    summary: |-
      메시지를 보내고, 메시지는 나중에 전송 되 고 이러한 예약 된 메시지 취소를 예약 발신자 클래스를 사용할 수 있습니다.
      사용 된 `createSender` QueueClient 또는 TopicClient 발신자를 인스턴스화하는 함수입니다.
      보낸 사람 클래스는 기본 AMQP 발신자 연결을 통해 추상적입니다.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    name: cancelScheduledMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: ServiceBus 큐/구독에 표시 되도록 예약 된 메시지를 취소 합니다.
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 취소 메시지의 시퀀스 번호입니다.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ServiceBus 큐/구독에 표시 되도록 예약 된 여러 메시지를 취소 합니다.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 배열 취소할 메시지의 시퀀스 번호입니다.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      기본 AMQP 보낸 사람 링크를 닫습니다.
      종료 되 면 추가 작업에 대 한 발신자를 사용할 수 없습니다.
      사용 된 `createSender` QueueClient 또는 TopicClient 새 발신자를 인스턴스화하는 함수
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 반환 `true` 보낸 사람 또는 만든 클라이언트 닫힌 경우
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessage'
    name: 'scheduleMessage(Date, SendableMessageInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 일정을 나중에 Service Bus 큐/구독에 표시할 메시지를 지정 합니다.
    syntax:
      content: 'function scheduleMessage(scheduledEnqueueTimeUtc: Date, message: SendableMessageInfo)'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: 메시지는 큐에 넣을 수는 UTC 시간입니다.
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: 예약 해야 하는 메시지입니다.
      return:
        type:
          - Promise<Long>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 일정을 나중에 Service Bus 큐/구독에 표시할 메시지를 지정 합니다.
    syntax:
      content: 'function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages: SendableMessageInfo[])'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: 메시지는 큐에 넣을 수는 UTC 시간입니다.
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: 예약 해야 하는 메시지의 배열입니다.
      return:
        type:
          - 'Promise<Long[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      이 아직 없으면 AMQP 보낸 사람 링크를 만드는 한 후 지정된 된 메시지를 보냅니다.
      메시지를 보낼를 `session` 및/또는 `partition` 설정 된 큐/토픽에 설정 합니다 `sessionId` 및/또는 `partitionKey` 메시지 각각의 속성입니다.
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: 보낼 메시지입니다.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      있으면 이미 없으면 AMQP 보낸 사람 링크를 만드는 단일 일괄 처리 즉, 단일 AMQP 메시지에에서 지정 된 메시지를 보냅니다.
      - 메시지를 보낼를 `session` 및/또는 `partition` 설정 된 큐/토픽에 설정 된 `sessionId` 및/또는 `partitionKey` 메시지 각각에 대 한 속성.
      - 일괄 처리의 모든 메시지가 동일한 있어야이 작업을 수행 하는 경우 `sessionId` (세션을 사용 하 여) 하는 경우와 동일한 `parititionKey` (파티션 사용) 하는 경우.
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: 일괄 처리 메시지를 보낼 SendableMessageInfo 개체의 배열입니다.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'