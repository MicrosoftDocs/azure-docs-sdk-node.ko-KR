### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="2a6c1-101">얼굴을 나타내는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-101">Class representing a Face.</span></span>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="2a6c1-102">이미지 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-102">An image stream.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: <span data-ttu-id="2a6c1-103">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-103">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="2a6c1-104">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-104">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="2a6c1-105">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>'
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="2a6c1-106">이미지 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-106">An image stream.</span></span>
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="2a6c1-107">이미지 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-107">An image stream.</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="2a6c1-108">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-108">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="2a6c1-109">이미지의 공개적으로 도달 가능한 URL</span><span class="sxs-lookup"><span data-stu-id="2a6c1-109">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: <span data-ttu-id="2a6c1-110">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-110">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="2a6c1-111">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-111">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="2a6c1-112">반환 얼굴 사각형, 이미지 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-112">Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.</span></span><br />
      * <span data-ttu-id="2a6c1-113">FaceId, 랜드마크, 특성 등 선택적 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-113">Optional parameters including faceId, landmarks, and attributes.</span></span> <span data-ttu-id="2a6c1-114">특성 연령, 성별, headPose, 웃는 얼굴 보내기, facialHair, 안경, emotion, 십자선, 구성, 폐색, accessories, 흐림 효과, 노출 및 노이즈를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-114">Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.</span></span>
      * <span data-ttu-id="2a6c1-115">실제 이미지 대신 추출 된 얼굴 기능을 서버에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-115">The extracted face feature, instead of the actual image, will be stored on server.</span></span> <span data-ttu-id="2a6c1-116">faceId 얼굴 기능 식별자 및에서 사용할 [직면-식별](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)를 [직면-확인](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), 및 [얼굴</span><span class="sxs-lookup"><span data-stu-id="2a6c1-116">The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face</span></span>
      - <span data-ttu-id="2a6c1-117">Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-117">Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).</span></span> <span data-ttu-id="2a6c1-118">검색 호출 후 24 시간 후 만료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-118">It will expire 24 hours after the detection call.</span></span>
      * <span data-ttu-id="2a6c1-119">얼굴 이미지 품질이 향상 탐지 및 인식 정밀도 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-119">Higher face image quality means better detection and recognition precision.</span></span> <span data-ttu-id="2a6c1-120">고품질 얼굴을 고려 하십시오: 정면, clear, 및 얼굴 크기는 200 또는 큰 x 200 픽셀 (눈 사이의 100 픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-120">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="2a6c1-121">JPEG, PNG, GIF (첫 번째 프레임) 및 BMP 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-121">JPEG, PNG, GIF (the first frame), and BMP format are supported.</span></span> <span data-ttu-id="2a6c1-122">허용 된 이미지 파일 크기가 1KB에서 6mb 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-122">The allowed image file size is from 1KB to 6MB.</span></span>
      * <span data-ttu-id="2a6c1-123">해당 크기는 36 x 36를 4096x4096 픽셀 하는 경우 얼굴을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-123">Faces are detectable when its size is 36x36 to 4096x4096 pixels.</span></span> <span data-ttu-id="2a6c1-124">하는 경우 입력된 이미지를 확대 하려면 보세요 매우 작지만 지우기 얼굴을 감지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-124">If need to detect very small but clear faces, please try to enlarge the input image.</span></span>
      * <span data-ttu-id="2a6c1-125">이미지는 최대 64 개의 면을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-125">Up to 64 faces can be returned for an image.</span></span> <span data-ttu-id="2a6c1-126">얼굴 작은 큰에서 얼굴 사각형 크기에 따라 순위가 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-126">Faces are ranked by face rectangle size from large to small.</span></span>
      * <span data-ttu-id="2a6c1-127">얼굴 탐지기 정면 및 정면에 가까운 얼굴을 선호 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-127">Face detector prefer frontal and near-frontal faces.</span></span> <span data-ttu-id="2a6c1-128">얼굴 감지, 예: 매우 큰 얼굴 각도 (머리 포즈) 또는 폐색 되 고 잘못 된 이미지 방향 수 있는 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-128">There are cases that faces may not be detected, e.g. exceptionally large face angles (head-pose) or being occluded, or wrong image orientation.</span></span>
      * <span data-ttu-id="2a6c1-129">특성 (연령, 성별, headPose, 웃는 얼굴 보내기, facialHair, 안경, emotion, 십자선, 구성, 폐색, accessories, 흐림 효과, 노출 및 노이즈)는 완벽 하 게 정확 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-129">Attributes (age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise) may not be perfectly accurate.</span></span> <span data-ttu-id="2a6c1-130">피치 값 HeadPose의 예약 된 필드 이며 항상 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-130">HeadPose's pitch value is a reserved field and will always return 0.</span></span>
      * <span data-ttu-id="2a6c1-131">다른 'recognitionModel' 값을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-131">Different 'recognitionModel' values are provided.</span></span> <span data-ttu-id="2a6c1-132">식별을 확인 하는 것과 같은 후속 작업 하는 경우 비슷한 찾이 필요 'recognitionModel' 매개 변수를 사용 하 여 인식 모델을 지정 하십시오.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-132">If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter.</span></span> <span data-ttu-id="2a6c1-133">'RecognitionModel'에 대 한 기본값 'recognition_01' 경우 최신 모델로 해야 모델이 매개이 변수에서 명시적으로 지정 하세요 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-133">The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter.</span></span> <span data-ttu-id="2a6c1-134">지정 되 면 검색 된 faceIds 지정된 인식 모델을 사용 하 여 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-134">Once specified, the detected faceIds will be associated with the specified recognition model.</span></span> <span data-ttu-id="2a6c1-135">자세한 내용은를 참조 하십시오 [인식 모델을 지정 하는 방법](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span><span class="sxs-lookup"><span data-stu-id="2a6c1-135">More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span></span>
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="2a6c1-136">이미지의 공개적으로 도달 가능한 URL</span><span class="sxs-lookup"><span data-stu-id="2a6c1-136">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="2a6c1-137">이미지의 공개적으로 도달 가능한 URL</span><span class="sxs-lookup"><span data-stu-id="2a6c1-137">Publicly reachable URL of an image</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="2a6c1-138">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-138">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="2a6c1-139">얼굴을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-139">Create a Face.</span></span>
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            <span data-ttu-id="2a6c1-140">서비스 클라이언트에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-140">Reference to the service client.</span></span>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="2a6c1-141">쿼리 얼굴의 FaceId를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-141">FaceId of the query face.</span></span> <span data-ttu-id="2a6c1-142">사용자는 얼굴 호출-가장 먼저 경험해 유효한 faceId를 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-142">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="2a6c1-143">이 faceId는 영구 저장소가 아니며 24 시간 검색 호출 후에 만료 되는</span><span class="sxs-lookup"><span data-stu-id="2a6c1-143">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: <span data-ttu-id="2a6c1-144">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-144">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="2a6c1-145">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-145">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="2a6c1-146">얼굴 목록 또는 큰 얼굴 faceId 배열에서 비슷해 보이는 얼굴을 검색할 쿼리 얼굴 faceId를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-146">Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.</span></span> <span data-ttu-id="2a6c1-147">faceId 배열에서 생성 한 얼굴을 포함 [얼굴 감지-](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)는 만든 후 24 시간에 만료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-147">faceId array contains the faces created by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), which will expire 24 hours after creation.</span></span> <span data-ttu-id="2a6c1-148">"FaceListId" 만들어집니다 [FaceList-만들기](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) 만료 되지 것입니다는 persistedFaceIds를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-148">A "faceListId" is created by [FaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) containing persistedFaceIds that will not expire.</span></span> <span data-ttu-id="2a6c1-149">"LargeFaceListId" 하 여 만들어지고 [LargeFaceList-만들기](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) 도 만료 되지 것입니다는 persistedFaceIds 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-149">And a "largeFaceListId" is created by [LargeFaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) containing persistedFaceIds that will also not expire.</span></span> <span data-ttu-id="2a6c1-150">입력에 따라 반환된 된 유사한 얼굴 목록 faceIds 또는 persistedFaceIds 유사성을 기준으로 순위를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-150">Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.</span></span>
      <br/><span data-ttu-id="2a6c1-151">유사한 찾기 "matchFace"와 "matchPerson"를 사용 하는, 두 가지 작업 모드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-151">Find similar has two working modes, "matchPerson" and "matchFace".</span></span> <span data-ttu-id="2a6c1-152">"matchPerson"에 내부 같은 사람 임계값을 사용 하 여 최대한 같은 사람의 얼굴을 찾으려고 시도 하는 기본 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-152">"matchPerson" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds.</span></span> <span data-ttu-id="2a6c1-153">사용자의 사진을 다른 알려진을 찾을 수는 것이 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-153">It is useful to find a known person's other photos.</span></span> <span data-ttu-id="2a6c1-154">얼굴이 없음을 내부 임계값을 전달 하는 경우 빈 목록이 반환 되는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-154">Note that an empty list will be returned if no faces pass the internal thresholds.</span></span> <span data-ttu-id="2a6c1-155">동일한 사람 임계값 및 유사한 얼굴을 그래도 순위 반환 "matchFace" 모드를 무시, 유사성도 부족 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-155">"matchFace" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low.</span></span> <span data-ttu-id="2a6c1-156">유명인 보이는 얼굴을 검색 하는 다음과 같은 경우 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-156">It can be used in the cases like searching celebrity-looking faces.</span></span>
      <br/><span data-ttu-id="2a6c1-157">쿼리 얼굴의 faceId와 사용 하 여 연결 된 'recognitionModel' 대상 faceId 배열, 얼굴 목록 또는 큰 얼굴 목록 별로 사용 되는 'recognitionModel'와 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-157">The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list.</span></span>
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="2a6c1-158">쿼리 얼굴의 FaceId를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-158">FaceId of the query face.</span></span> <span data-ttu-id="2a6c1-159">사용자는 얼굴 호출-가장 먼저 경험해 유효한 faceId를 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-159">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="2a6c1-160">이 faceId는 영구 저장소가 아니며 24 시간 검색 호출 후에 만료 되는</span><span class="sxs-lookup"><span data-stu-id="2a6c1-160">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="2a6c1-161">쿼리 얼굴의 FaceId를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-161">FaceId of the query face.</span></span> <span data-ttu-id="2a6c1-162">사용자는 얼굴 호출-가장 먼저 경험해 유효한 faceId를 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-162">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="2a6c1-163">이 faceId는 영구 저장소가 아니며 24 시간 검색 호출 후에 만료 되는</span><span class="sxs-lookup"><span data-stu-id="2a6c1-163">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="2a6c1-164">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-164">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="2a6c1-165">후보 얼굴을 얼굴 유사성에 따라 그룹으로 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-165">Divide candidate faces into groups based on face similarity.</span></span><br />
      * <span data-ttu-id="2a6c1-166">출력에는 하나 이상의 연결 되지 않은 얼굴 그룹과 messyGroup 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-166">The output is one or more disjointed face groups and a messyGroup.</span></span> <span data-ttu-id="2a6c1-167">얼굴 그룹은 비슷한를 찾고 종종 같은 사람의 얼굴을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-167">A face group contains faces that have similar looking, often of the same person.</span></span> <span data-ttu-id="2a6c1-168">얼굴 그룹 여 얼굴 수 즉, 그룹 크기에 따라 순위가 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-168">Face groups are ranked by group size, i.e. number of faces.</span></span> <span data-ttu-id="2a6c1-169">동일한 사람에 게 속한 얼굴 결과에 여러 그룹으로 분할 하는 알 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-169">Notice that faces belonging to a same person might be split into several groups in the result.</span></span>
      * <span data-ttu-id="2a6c1-170">MessyGroup은 원래 면에서 모든 유사한 누구 얼굴을 찾을 수 없다는 얼굴을 포함 하는 특별 한 얼굴 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-170">MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces.</span></span> <span data-ttu-id="2a6c1-171">모든 얼굴 대응 있으면 결과 messyGroup 나타나지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-171">The messyGroup will not appear in the result if all faces found their counterparts.</span></span>
      * <span data-ttu-id="2a6c1-172">그룹 API 최대 2 개 이상의 후보 얼굴 및 1000 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-172">Group API needs at least 2 candidate faces and 1000 at most.</span></span> <span data-ttu-id="2a6c1-173">하려는 것이 좋습니다 [직면-확인](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) 만 있는 경우 2 후보 얼굴입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-173">We suggest to try [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces.</span></span>
      * <span data-ttu-id="2a6c1-174">쿼리 얼굴 faceIds 연관 'recognitionModel' 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-174">The 'recognitionModel' associated with the query faces' faceIds should be the same.</span></span>
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="2a6c1-175">후보 faceId 배열을 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-175">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="2a6c1-176">최대값은 1000 개 얼굴</span><span class="sxs-lookup"><span data-stu-id="2a6c1-176">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="2a6c1-177">후보 faceId 배열을 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-177">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="2a6c1-178">최대값은 1000 개 얼굴</span><span class="sxs-lookup"><span data-stu-id="2a6c1-178">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="2a6c1-179">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-179">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="2a6c1-180">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-180">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="2a6c1-181">후보 faceId 배열을 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-181">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="2a6c1-182">최대값은 1000 개 얼굴</span><span class="sxs-lookup"><span data-stu-id="2a6c1-182">The maximum is 1000 faces</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="2a6c1-183">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-183">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="2a6c1-184">배열 쿼리 얼굴 faceIds, 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-184">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="2a6c1-185">각 얼굴 식별 됩니다 하지 독립적으로.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-185">Each of the faces are identified independently.</span></span> <span data-ttu-id="2a6c1-186">유효한 faceIds 수 간에 [1, 10]입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-186">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: <span data-ttu-id="2a6c1-187">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-187">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="2a6c1-188">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-188">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="2a6c1-189">사용자 그룹 또는 큰 사용자 그룹에서 특정 쿼리 사용자 글꼴의 가장 가까운 일치 항목을 찾으려고 1 대 다 id입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-189">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
      <br/> <span data-ttu-id="2a6c1-190">FaceIds 배열에 있는 각 얼굴을 얼굴 식별 됩니다 계산 쿼리 얼굴 및 (personGroupId로 지정)의 사용자 그룹의 모든 얼굴에 대 한 유사성 또는 큰 사용자 (largePersonGroupId 하 여 지정), 그룹화 및 순위를 지정 하는 얼굴에 대 한 후보 첵을 반환 합니다. 유사성 신뢰도입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-190">For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence.</span></span> <span data-ttu-id="2a6c1-191">사용자 그룹/대규모 사용자 그룹 id에 대 한 준비 확인 하도록 교육을 받아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-191">The person group/large person group should be trained to make it ready for identification.</span></span> <span data-ttu-id="2a6c1-192">에 대해 자세히 알아보기 [PersonGroup-학습](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) 하 고 [LargePersonGroup-학습](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-192">See more in [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).</span></span>
      <br/>
      <span data-ttu-id="2a6c1-193">설명:</span><span class="sxs-lookup"><span data-stu-id="2a6c1-193">Remarks:</span></span><br />
      * <span data-ttu-id="2a6c1-194">알고리즘 같은 요청에서 독립적으로 식별할 수 있도록 둘 이상의 얼굴 수가 10 개 얼굴 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-194">The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.</span></span>
      * <span data-ttu-id="2a6c1-195">사용자 그룹/대규모 사용자 그룹의 각 사용자는 둘 이상의 면 있지만 개 이하의 248 얼굴 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-195">Each person in the person group/large person group could have more than one face, but no more than 248 faces.</span></span>
      * <span data-ttu-id="2a6c1-196">얼굴 이미지 품질이 향상 식별 정밀도 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-196">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="2a6c1-197">고품질 얼굴을 고려 하십시오: 정면, clear, 및 얼굴 크기는 200 또는 큰 x 200 픽셀 (눈 사이의 100 픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-197">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="2a6c1-198">반환 된 후보의 개수입니다 maxNumOfCandidatesReturned confidenceThreshold로 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-198">Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold.</span></span> <span data-ttu-id="2a6c1-199">없는 사용자를 식별 하는 경우 반환 된 후보 빈 배열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-199">If no person is identified, the returned candidates will be an empty array.</span></span>
      * <span data-ttu-id="2a6c1-200">시도 [얼굴-비슷한 찾을](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) 유사한 얼굴을 얼굴 목록/대용량 얼굴 대신 목록에서 person 그룹/대규모 사용자 그룹을 찾아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-200">Try [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group.</span></span>
      * <span data-ttu-id="2a6c1-201">쿼리 얼굴 faceIds 연관 'recognitionModel' 대상 사용자 그룹 또는 큰 사용자 그룹에 의해 사용 되는 'recognitionModel'와 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-201">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group.</span></span>
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="2a6c1-202">배열 쿼리 얼굴 faceIds, 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-202">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="2a6c1-203">각 얼굴 식별 됩니다 하지 독립적으로.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-203">Each of the faces are identified independently.</span></span> <span data-ttu-id="2a6c1-204">유효한 faceIds 수 간에 [1, 10]입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-204">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="2a6c1-205">배열 쿼리 얼굴 faceIds, 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-205">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="2a6c1-206">각 얼굴 식별 됩니다 하지 독립적으로.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-206">Each of the faces are identified independently.</span></span> <span data-ttu-id="2a6c1-207">유효한 faceIds 수 간에 [1, 10]입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-207">The valid number of faceIds is between [1, 10].</span></span>'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="2a6c1-208">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-208">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="2a6c1-209">여부 두 얼굴이 같은 사람의 또는 사람에 게 한 면이 속하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-209">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
      <br/>
      <span data-ttu-id="2a6c1-210">설명:</span><span class="sxs-lookup"><span data-stu-id="2a6c1-210">Remarks:</span></span><br />
      * <span data-ttu-id="2a6c1-211">얼굴 이미지 품질이 향상 식별 정밀도 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-211">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="2a6c1-212">고품질 얼굴을 고려 하십시오: 정면, clear, 및 얼굴 크기는 200 또는 큰 x 200 픽셀 (눈 사이의 100 픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-212">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="2a6c1-213">정확도에 영향을 받는 시나리오에 대 한 고유한 판단을 확인 하세요.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-213">For the scenarios that are sensitive to accuracy please make your own judgment.</span></span>
      * <span data-ttu-id="2a6c1-214">쿼리 얼굴 faceIds 연관 'recognitionModel' 대상 face, person group 또는 큰 사용자 그룹에 의해 사용 되는 'recognitionModel'와 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-214">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group.</span></span>
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="2a6c1-215">얼굴에서 제공 되는 첫 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-215">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="2a6c1-216">얼굴에서 제공 되는 두 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-216">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="2a6c1-217">얼굴에서 제공 되는 첫 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-217">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="2a6c1-218">얼굴에서 제공 되는 두 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-218">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="2a6c1-219">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-219">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="2a6c1-220">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-220">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="2a6c1-221">얼굴에서 제공 되는 첫 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-221">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="2a6c1-222">얼굴에서 제공 되는 두 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-222">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="2a6c1-223">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-223">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="2a6c1-224">얼굴에서 제공 되는 얼굴의 FaceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-224">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="2a6c1-225">사용자 그룹 또는 큰 사용자 그룹에 특정 사용자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-225">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="2a6c1-226">personId PersonGroup 직접에서 만들어집니다-만들거나 LargePersonGroup 사람-만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-226">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: <span data-ttu-id="2a6c1-227">선택적 매개 변수</span><span class="sxs-lookup"><span data-stu-id="2a6c1-227">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="2a6c1-228">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-228">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2a6c1-229">여부를 두 얼굴이 같은 사람의 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-229">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="2a6c1-230">얼굴 Id가 사용자 Id를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-230">Compares a face Id with a Person Id</span></span>
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="2a6c1-231">얼굴에서 제공 되는 얼굴의 FaceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-231">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="2a6c1-232">사용자 그룹 또는 큰 사용자 그룹에 특정 사용자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-232">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="2a6c1-233">personId PersonGroup 직접에서 만들어집니다-만들거나 LargePersonGroup 사람-만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-233">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="2a6c1-234">얼굴에서 제공 되는 얼굴의 FaceId-검색</span><span class="sxs-lookup"><span data-stu-id="2a6c1-234">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="2a6c1-235">사용자 그룹 또는 큰 사용자 그룹에 특정 사용자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-235">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="2a6c1-236">personId PersonGroup 직접에서 만들어집니다-만들거나 LargePersonGroup 사람-만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2a6c1-236">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="2a6c1-237">콜백</span><span class="sxs-lookup"><span data-stu-id="2a6c1-237">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'