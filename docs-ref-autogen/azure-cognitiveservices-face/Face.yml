### YamlMime:UniversalReference
ms.openlocfilehash: 5b2dcbac70d3d42b4477c37100171c12991de94f
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52150928"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detectWithStream
  - azure-cognitiveservices-face.Face.detectWithStream_2
  - azure-cognitiveservices-face.Face.detectWithStream_1
  - azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithUrl
  - azure-cognitiveservices-face.Face.detectWithUrl_2
  - azure-cognitiveservices-face.Face.detectWithUrl_1
  - azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToFace
  - azure-cognitiveservices-face.Face.verifyFaceToFace_2
  - azure-cognitiveservices-face.Face.verifyFaceToFace_1
  - azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToPerson
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  - azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream
  name: detectWithStream(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-101">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="520f3-102">이미지 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-102">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_2
  name: detectWithStream(stream.Readable, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-103">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_1
  name: detectWithStream(stream.Readable, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-104">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  name: detectWithStreamWithHttpOperationResponse(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-105">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="520f3-106">이미지 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-106">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl
  name: detectWithUrl(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-107">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-107">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="520f3-108">이미지의 공개적으로 도달 가능한 URL</span><span class="sxs-lookup"><span data-stu-id="520f3-108">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_2
  name: detectWithUrl(string, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-109">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-109">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_1
  name: detectWithUrl(string, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-110">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  name: detectWithUrlWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-111">이미지 및 반환 얼굴 위치 및 필요에 따라 faceIds, 랜드마크, 및 특성을 사용 하 여 사람 얼굴을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-111">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrlWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="520f3-112">이미지의 공개적으로 도달 가능한 URL</span><span class="sxs-lookup"><span data-stu-id="520f3-112">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-113">FaceId 배열, 얼굴 목록 또는 큰 얼굴 목록에서 비슷해 보이는 얼굴을 찾을 쿼리 얼굴 faceId를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-113">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-114">쿼리 얼굴의 FaceId를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-114">FaceId of the query face.</span></span> <span data-ttu-id="520f3-115">사용자는 얼굴 호출-가장 먼저 경험해 유효한 faceId를 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-115">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="520f3-116">이 faceId는 영구 저장소가 아니며 24 시간 검색 호출 후에 만료 되는</span><span class="sxs-lookup"><span data-stu-id="520f3-116">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar(string, Object, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-117">FaceId 배열, 얼굴 목록 또는 큰 얼굴 목록에서 비슷해 보이는 얼굴을 찾을 쿼리 얼굴 faceId를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-117">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar(string, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-118">FaceId 배열, 얼굴 목록 또는 큰 얼굴 목록에서 비슷해 보이는 얼굴을 찾을 쿼리 얼굴 faceId를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-118">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-119">FaceId 배열, 얼굴 목록 또는 큰 얼굴 목록에서 비슷해 보이는 얼굴을 찾을 쿼리 얼굴 faceId를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-119">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-120">쿼리 얼굴의 FaceId를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-120">FaceId of the query face.</span></span> <span data-ttu-id="520f3-121">사용자는 얼굴 호출-가장 먼저 경험해 유효한 faceId를 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-121">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="520f3-122">이 faceId는 영구 저장소가 아니며 24 시간 검색 호출 후에 만료 되는</span><span class="sxs-lookup"><span data-stu-id="520f3-122">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-123">후보 얼굴을 얼굴 유사성에 따라 그룹으로 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-123">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="520f3-124">후보 faceId 배열을 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-124">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="520f3-125">최대값은 1000 개 얼굴</span><span class="sxs-lookup"><span data-stu-id="520f3-125">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group(string[], Object, ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-126">후보 얼굴을 얼굴 유사성에 따라 그룹으로 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group(string[], ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-127">후보 얼굴을 얼굴 유사성에 따라 그룹으로 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-127">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-128">후보 얼굴을 얼굴 유사성에 따라 그룹으로 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-128">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="520f3-129">후보 faceId 배열을 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-129">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="520f3-130">최대값은 1000 개 얼굴</span><span class="sxs-lookup"><span data-stu-id="520f3-130">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-131">사용자 그룹 또는 큰 사용자 그룹에서 특정 쿼리 사용자 글꼴의 가장 가까운 일치 항목을 찾으려고 1 대 다 id입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-131">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="520f3-132">배열 쿼리 얼굴 faceIds, 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-132">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="520f3-133">각 얼굴 식별 됩니다 하지 독립적으로.</span><span class="sxs-lookup"><span data-stu-id="520f3-133">Each of the faces are identified independently.</span></span> <span data-ttu-id="520f3-134">유효한 faceIds 수 간에 [1, 10]입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-134">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify(string[], Object, ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-135">사용자 그룹 또는 큰 사용자 그룹에서 특정 쿼리 사용자 글꼴의 가장 가까운 일치 항목을 찾으려고 1 대 다 id입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-135">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify(string[], ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-136">사용자 그룹 또는 큰 사용자 그룹에서 특정 쿼리 사용자 글꼴의 가장 가까운 일치 항목을 찾으려고 1 대 다 id입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-136">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-137">사용자 그룹 또는 큰 사용자 그룹에서 특정 쿼리 사용자 글꼴의 가장 가까운 일치 항목을 찾으려고 1 대 다 id입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-137">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="520f3-138">배열 쿼리 얼굴 faceIds, 얼굴 만든-검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-138">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="520f3-139">각 얼굴 식별 됩니다 하지 독립적으로.</span><span class="sxs-lookup"><span data-stu-id="520f3-139">Each of the faces are identified independently.</span></span> <span data-ttu-id="520f3-140">유효한 faceIds 수 간에 [1, 10]입니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-140">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace
  name: verifyFaceToFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-141">여부 두 얼굴이 같은 사람의 또는 사람에 게 한 면이 속하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="520f3-142">얼굴에서 제공 되는 첫 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-142">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="520f3-143">얼굴에서 제공 되는 두 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-143">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_2
  name: verifyFaceToFace(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-144">여부 두 얼굴이 같은 사람의 또는 사람에 게 한 면이 속하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-144">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_1
  name: verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-145">여부 두 얼굴이 같은 사람의 또는 사람에 게 한 면이 속하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-145">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  name: verifyFaceToFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-146">여부 두 얼굴이 같은 사람의 또는 사람에 게 한 면이 속하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-146">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFaceWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="520f3-147">얼굴에서 제공 되는 첫 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-147">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="520f3-148">얼굴에서 제공 되는 두 번째 면의 faceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-148">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson
  name: verifyFaceToPerson(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-149">여부를 두 얼굴이 같은 사람의 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-149">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="520f3-150">얼굴 Id가 사용자 Id를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-150">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-151">얼굴에서 제공 되는 얼굴의 FaceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-151">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-152">사용자 그룹 또는 큰 사용자 그룹에 특정 사용자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-152">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="520f3-153">personId PersonGroup 직접에서 만들어집니다-만들거나 LargePersonGroup 사람-만듭니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-153">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  name: verifyFaceToPerson(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-154">여부를 두 얼굴이 같은 사람의 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="520f3-155">얼굴 Id가 사용자 Id를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  name: verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-156">여부를 두 얼굴이 같은 사람의 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="520f3-157">얼굴 Id가 사용자 Id를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  name: verifyFaceToPersonWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="520f3-158">여부를 두 얼굴이 같은 사람의 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-158">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="520f3-159">얼굴 Id가 사용자 Id를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-159">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPersonWithHttpOperationResponse(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-160">얼굴에서 제공 되는 얼굴의 FaceId-검색</span><span class="sxs-lookup"><span data-stu-id="520f3-160">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="520f3-161">사용자 그룹 또는 큰 사용자 그룹에 특정 사용자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-161">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="520f3-162">personId PersonGroup 직접에서 만들어집니다-만들거나 LargePersonGroup 사람-만듭니다.</span><span class="sxs-lookup"><span data-stu-id="520f3-162">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  name: DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  name: SimilarFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  name: GroupResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  name: IdentifyResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  name: VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
